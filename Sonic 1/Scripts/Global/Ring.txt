// ----------------------------------
// RSDK Project: Sonic 1/Sonic 2
// Script Description: Ring Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// Aliases
private alias 10 : TYPE_RING

private alias object.value1 : ring.targetPlayer

private alias object.value0  : player.rings
private alias object.value37 : player.shield

private alias 4 : SHIELD_LIGHTNING

// Function declarations
reserve function Ring_DebugDraw
reserve function Ring_DebugSpawn

function Ring_DebugDraw
	DrawSprite(0)
end function


function Ring_DebugSpawn
	CreateTempObject(TypeName[Ring], 0, object.xpos, object.ypos)
	object[tempObjectPos].drawOrder = 4
end function


event ObjectMain

	// Interact with player(s)
	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)

		// Check if the player should be able to collect rings
		CheckEqual(object[0].state, PlayerObject_Knockback)
		temp0 = checkResult
		CheckEqual(object[currentPlayer].state, PlayerObject_Knockback)
		temp0 = checkResult
		CheckEqual(object[currentPlayer].state, PlayerObject_Hurt)
		temp0 |= checkResult

		if temp0 == false

			// Did the player collide with the ring?
			BoxCollisionTest(C_TOUCH, object.entityPos, -8, -8, 8, 8, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			if checkResult == true

				// Make the ring disappear
				object.type = TypeName[Ring Sparkle]

				// Add to the player's ring count
				player[0].rings++

				// Max 999 rings
				if player[0].rings > 999
					player[0].rings = 999
				end if

				// Give the player an extra life if needed
				if player[0].rings >= ringExtraLife
					if options.gameMode != 2
						player.lives++
						PlaySfx(SfxName[Life], 0)
						PauseMusic()
						ResetObjectEntity(25, TypeName[Music Event], 2, 0, 0)
						object[25].priority = PRIORITY_ACTIVE
					end if
					if stage.debugMode == 0
						if player[0].rings >= 200
							CallNativeFunction2(SetAchievement, 4, 100)
						end if
					end if
					ringExtraLife += 100
					if ringExtraLife > 300
						ringExtraLife = 1000
					end if
				end if

				// Update achievment collection
				if object.propertyValue == 1
					if stage.debugMode == 0
						if options.attractMode == 0
							if currentPlayer == 0
								if object[0].animation == ANI_JUMPING
									achieveRingCount++
									if achieveRingCount == 30
										CallNativeFunction2(SetAchievement, 0, 100)
										achieveRingCount = 0
									end if
								end if
							end if
						end if
					end if
				end if

				// Play the ring chime
				if ringPan == 0
					PlaySfx(SfxName[Ring L], 0)
					SetSfxAttributes(SfxName[Ring L], -1, -100)
					ringPan = 1
				else
					PlaySfx(SfxName[Ring R], 0)
					SetSfxAttributes(SfxName[Ring R], -1, 100)
					ringPan = 0
				end if

			else

				// Is this just a normal ring?
				if object.state == 0

					// Does the player have the lightning shield?
					if player[currentPlayer].shield == SHIELD_LIGHTNING

						// Check if this ring falls within the lightning shield attraction range
						BoxCollisionTest(C_TOUCH, object.entityPos, -64, -64, 64, 64, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
						if checkResult == true
							object.state = 1
							ring.targetPlayer = currentPlayer
						end if

					end if

				end if

			end if
		end if
	next

	// Attracted ring?
	if object.state == 1

		// Check if the player's lost their lightning shield
		arrayPos0 = ring.targetPlayer
		if player[arrayPos0].shield != SHIELD_LIGHTNING

			// Make the ring fall to the ground
			object.type = TypeName[Lose Ring]
			object.animationSpeed = 128
			object.alpha = 256

		else

			// Move to the player
			arrayPos0 = ring.targetPlayer
			if object.xpos > object[arrayPos0].xpos
				if object.xvel > 0
					object.xvel -= 0xC000
				else
					object.xvel -= 0x3000
				end if
			else
				if object.xvel < 0
					object.xvel += 0xC000
				else
					object.xvel += 0x3000
				end if
			end if
			if object.ypos > object[arrayPos0].ypos
				if object.yvel > 0
					object.yvel -= 0xC000
				else
					object.yvel -= 0x3000
				end if
			else
				if object.yvel < 0
					object.yvel += 0xC000
				else
					object.yvel += 0x3000
				end if
			end if

			object.xpos += object.xvel
			object.ypos += object.yvel

		end if

	end if

end event


event ObjectDraw
	DrawSprite(ringFrame)
end event


event ObjectStartup

	LoadSpriteSheet("Global/Items.gif")

	foreach (TypeName[Ring], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].drawOrder = 4
	next

	// Reset the achievment value
	achieveRingCount = 0

	// Ring frames
	SpriteFrame(-8, -8, 16, 16, 1, 1)
	SpriteFrame(-8, -8, 16, 16, 1, 18)
	SpriteFrame(-8, -8, 16, 16, 1, 35)
	SpriteFrame(-8, -8, 16, 16, 1, 52)
	SpriteFrame(-8, -8, 16, 16, 1, 69)
	SpriteFrame(-8, -8, 16, 16, 1, 86)
	SpriteFrame(-8, -8, 16, 16, 1, 103)
	SpriteFrame(-8, -8, 16, 16, 1, 120)

	// Add the ring to the stage's debug mode list
	SetTableValue(TypeName[Ring], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(Ring_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(Ring_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++
end event

event RSDKDraw
	DrawSprite(0)
end event

event RSDKLoad
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-8,-8,16,16,1,1)
end event
