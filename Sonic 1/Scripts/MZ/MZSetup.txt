// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: MZ Setup Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.value1 : object.lavaTileFrame
private alias object.value2 : object.lavaAniTileID
private alias object.value3 : object.lavaAnimTimer
private alias object.value4 : object.candleAnimTimer

private alias 1 : TILE_LAVA

// Player Aliases
private alias object.xpos : player.xpos
private alias object.ypos : player.ypos
private alias object.value37 : player.shield

// Shields
private alias 3 : SHIELD_FIRE

// Tracks
private alias 0 : TRACK_STAGE
private alias 2 : TRACK_INVINCIBLE
private alias 4 : TRACK_BOSS

// Reserved object slots
private alias 10 : SLOT_ZONESETUP
private alias 25 : SLOT_MUSICEVENT_CHANGE
private alias 26 : SLOT_MUSICEVENT_BOSS

private alias 0 : MUSICEVENT_FADETOBOSS
private alias 1 : MUSICEVENT_FADETOSTAGE
private alias 2 : MUSICEVENT_TRANSITION

private alias 0 : MUSICEVENT_FLAG_NOCHANGE
private alias 1 : MUSICEVENT_FLAG_SPEEDUP
private alias 2 : MUSICEVENT_FLAG_SLOWDOWN

// Music loops
private alias 99380 : MUSIC_LOOP_MZ
private alias 79537 : MUSIC_LOOP_MZ_F

private alias 39528 : MUSIC_LOOP_INV
private alias 30436 : MUSIC_LOOP_INV_F


// ========================
// Function Declarations
// ========================
reserve function MZSetup_SpeedUpMusic
reserve function MZSetup_SlowDownMusic


// ========================
// Tables
// ========================
private table MZSetup_replay_attract_S
	0x0300000, 0x2640000
	0b00000000, 8
	0b00001000, 137
	0b00111000, 1
	0b00101000, 4
	0b00001000, 14
	0b00000000, 18
	0b00001000, 18
	0b00111000, 1
	0b00101000, 7
	0b00001000, 2
	0b00000000, 32
	0b00000010, 13
	0b00000000, 3
	0b00110000, 1
	0b00100000, 8
	0b00000000, 3
	0b00001000, 49
	0b00111000, 1
	0b00101000, 7
	0b00001000, 37
	0b00111000, 1
	0b00101000, 8
	0b00001000, 2
	0b00000000, 18
	0b00000100, 16
	0b00000000, 5
	0b00110000, 1
	0b00100000, 11
	0b00001000, 11
	0b00000000, 7
	0b00000100, 16
	0b00000000, 4
	0b00001000, 6
	0b00000000, 22
	0b00001000, 5
	0b00111000, 1
	0b00101000, 12
	0b00001000, 16
	0b00000000, 17
	0b00001000, 31
	0b00000000, 13
	0b00111000, 1
	0b00101000, 9
	0b00000000, 36
	0b00001000, 2
	0b00111000, 1
	0b00101000, 9
	0b00001000, 36
	0b00000000, 66
	0b00110000, 1
	0b00100000, 8
	0b00000100, 37
	0b00000000, 6
	0b00000100, 17
	0b00110100, 1
	0b00100100, 6
	0b00000100, 68
	0b00000000, 28
	0b00000010, 12
	0b00110010, 1
	0b00100010, 8
	0b00000010, 50
	0b00000000, 32
	0b00001000, 83
	0b00111000, 1
	0b00101000, 8
	0b00001000, 9
	0b00000000, 21
	0b00111000, 1
	0b00101000, 7
	0b00001000, 5
	0b00000000, 98
	0b00001000, 69
	0b00000000, 25
	0b00001000, 21
	0b00111000, 1
	0b00101000, 6
	0b00001000, 4
	0b00000000, 15
	0b00000100, 16
	0b00000000, 4
	0b00001000, 18
	0b00111000, 1
	0b00101000, 7
	0b00001000, 5
	0b00000000, 27
	0b00001000, 23
	0b00000000, 9
	0b00110000, 1
	0b00100000, 6
	0b00000000, 19
	0b00001000, 19
	0b00000000, 20
	0b00111000, 4
	0b00101000, 9
	0b00001000, 4
end table

private table MZSetup_replay_attract_T
	0x0300000, 0x2680000
	0b00000000, 8
	0b00001000, 41
	0b00111000, 1
	0b00101000, 3
	0b00001000, 80
	0b00111000, 1
	0b00101000, 6
	0b00001000, 7
	0b00000000, 23
	0b00001000, 21
	0b00111000, 1
	0b00101000, 5
	0b00001000, 6
	0b00000000, 15
	0b00001000, 8
	0b00000000, 17
	0b00111000, 1
	0b00101000, 5
	0b00001000, 46
	0b00111000, 1
	0b00101000, 12
	0b00001000, 30
	0b00000000, 9
	0b00110000, 1
	0b00100000, 3
	0b00101000, 3
	0b00000000, 25
	0b00000100, 4
	0b00000000, 7
	0b00001000, 3
	0b00111000, 1
	0b00101000, 7
	0b00000000, 14
	0b00000100, 18
	0b00000000, 5
	0b00001000, 5
	0b00111000, 1
	0b00101000, 9
	0b00001000, 7
	0b00000000, 24
	0b00001000, 17
	0b00000000, 12
	0b00001000, 19
	0b00000000, 3
	0b00110000, 1
	0b00100000, 7
	0b00101000, 4
	0b00001000, 12
	0b00000000, 20
	0b00001000, 17
	0b00111000, 1
	0b00101000, 10
	0b00001000, 98
	0b00000000, 7
	0b00000100, 80
	0b00110100, 1
	0b00100100, 20
	0b00000100, 2
	0b00000000, 14
	0b00001000, 21
	0b00111000, 1
	0b00101000, 10
	0b00001000, 15
	0b00111000, 1
	0b00101000, 7
	0b00001000, 59
	0b00000000, 23
	0b00001000, 6
	0b00111000, 1
	0b00101000, 6
	0b00001000, 56
	0b00000000, 27
	0b00001000, 24
	0b00000000, 17
	0b00001000, 73
	0b00111000, 1
	0b00101000, 8
	0b00001000, 23
	0b00000000, 5
	0b00000100, 25
	0b00000000, 24
	0b00000100, 36
	0b00000000, 77
	0b00000100, 35
	0b00110100, 1
	0b00100100, 7
	0b00000100, 7
	0b00000000, 13
	0b00001000, 19
	0b00000000, 53
	0b00000100, 10
	0b00110100, 1
	0b00100100, 4
	0b00000100, 16
	0b00000000, 14
	0b00000100, 8
	0b00000000, 101
	0b00000100, 4
	0b00110100, 1
	0b00100100, 2
	0b00000100, 32
	0b00000000, 14
end table

private table MZSetup_replay_attract_K
	0x0300000, 0x2640000
	0b00000000, 22
	0b00001000, 137
	0b00111000, 1
	0b00101000, 7
	0b00001000, 6
	0b00000000, 40
	0b00001000, 9
	0b00111000, 1
	0b00101000, 6
	0b00001000, 18
	0b00000000, 3
	0b00000100, 16
	0b00001000, 5
	0b00111000, 1
	0b00101000, 8
	0b00001000, 22
	0b00111000, 1
	0b00101000, 27
	0b00001000, 32
	0b00111000, 1
	0b00101000, 15
	0b00001000, 9
	0b00000000, 27
	0b00110000, 1
	0b00100000, 10
	0b00101000, 2
	0b00001000, 18
	0b00000000, 21
	0b00001000, 2
	0b00111000, 1
	0b00101000, 14
	0b00100000, 3
	0b00000000, 8
	0b00000100, 16
	0b00000000, 3
	0b00001000, 40
	0b00111000, 1
	0b00101000, 24
	0b00001000, 4
	0b00000000, 18
	0b00001000, 11
	0b00111000, 1
	0b00101000, 13
	0b00001000, 86
	0b00111000, 1
	0b00101000, 5
	0b00001000, 6
	0b00111000, 1
	0b00101000, 201
	0b00001000, 31
	0b00111000, 1
	0b00101000, 6
	0b00001000, 11
	0b00000000, 17
	0b00001000, 29
	0b00000000, 47
	0b00110000, 1
	0b00100000, 14
	0b00000000, 24
	0b00000100, 15
	0b00000000, 16
	0b00001000, 9
	0b00000000, 47
	0b00110000, 1
	0b00100000, 13
	0b00101000, 2
	0b00001000, 8
	0b00111000, 1
	0b00101000, 20
	0b00001001, 3
	0b00000001, 83
	0b00001001, 2
	0b00001000, 91
	0b00000000, 29
	0b00110000, 1
	0b00100000, 13
	0b00000000, 7
	0b00110000, 1
	0b00100000, 15
	0b00100001, 1
end table

private table MZSetup_replay_credits_ST
	0x0EA00000, 0x46C0000
	0b00000000, 23
	0b00000100, 40
	0b00000000, 5
	0b00001000, 31
	0b00111000, 1
	0b00101000, 30
	0b00001000, 24
	0b00111000, 1
	0b00101000, 3
	0b00101100, 2
	0b00100100, 8
	0b00000100, 13
	0b00000000, 15
	0b00000100, 16
	0b00000000, 5
	0b00000100, 22
	0b00110100, 1
	0b00100100, 3
	0b00000100, 4
	0b00000000, 16
	0b00000100, 121
	0b00000000, 42
	0b00001000, 8
	0b00000000, 19
	0b00000000, 8
	0b00000100, 1
	0b00000000, 64
end table

private table MZSetup_replay_credits_K
	0x0EA00000, 0x46C0000
	0b00000000, 25
	0b00000100, 29
	0b00110100, 1
	0b00100100, 15
	0b00000100, 5
	0b00000000, 18
	0b00001000, 17
	0b00111000, 1
	0b00101000, 10
	0b00001000, 4
	0b00111000, 1
	0b00101000, 43
	0b00001000, 4
	0b00000000, 17
	0b00000100, 4
	0b00110100, 1
	0b00100100, 5
	0b00000100, 3
	0b00000000, 33
	0b00000100, 109
	0b00000000, 34
	0b00001000, 9
	0b00000000, 15
	0b00000100, 5
	0b00000000, 255
	0b00000000, 40
	0b00110000, 1
	0b00100000, 8
	0b00000000, 7
	0b00000100, 12
end table

public function MZSetup_SpeedUpMusic
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F)
			SwapMusicTrack("Marble_F.ogg", TRACK_STAGE, MUSIC_LOOP_MZ_F, 8000)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("Marble_F.ogg", TRACK_STAGE, MUSIC_LOOP_MZ_F)
			SwapMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F, 8000)
			break

		case TRACK_BOSS
			SetMusicTrack("Marble_F.ogg", TRACK_STAGE, MUSIC_LOOP_MZ_F)
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SPEEDUP
	end if
end function


public function MZSetup_SpeedUpMusic
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV)
			SwapMusicTrack("Marble.ogg", TRACK_STAGE, MUSIC_LOOP_MZ, 12500)
			break
			
		case TRACK_INVINCIBLE
			SetMusicTrack("Marble.ogg", TRACK_STAGE, MUSIC_LOOP_MZ)
			SwapMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV, 12500)
			break

		case TRACK_BOSS
			SetMusicTrack("Marble.ogg", TRACK_STAGE, MUSIC_LOOP_MZ)
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SLOWDOWN
	end if
end function


// ========================
// Events
// ========================

event ObjectUpdate
	object.frame = object.animationTimer
	object.frame /= 20
	object.animationTimer++
	object.animationTimer %= 60

	object.lavaAniTileID = object.frame
	object.lavaAniTileID <<= 1
	object.lavaAniTileID += 440
	Copy16x16Tile(366, object.lavaAniTileID)

	object.lavaAniTileID++
	Copy16x16Tile(367, object.lavaAniTileID)

	switch object.frame
	case 0
		object.lavaAniTileID = 460
		break
	case 1
		object.lavaAniTileID = 528
		break
	case 2
		object.lavaAniTileID = 596
		break
	end switch

	object.lavaAnimTimer++
	object.lavaAnimTimer &= 0x1FF
	Sin(object.lavaTileFrame, object.lavaAnimTimer)
	object.lavaTileFrame += 0x200
	object.lavaTileFrame >>= 2
	object.lavaTileFrame &= 0x1F
	if object.lavaTileFrame > 0xF
		object.lavaTileFrame &= 15
		object.lavaTileFrame <<= 2

		object.lavaAniTileID += object.lavaTileFrame
		Copy16x16Tile(363, object.lavaAniTileID)

		object.lavaAniTileID++
		Copy16x16Tile(362, object.lavaAniTileID)

		object.lavaAniTileID++
		Copy16x16Tile(365, object.lavaAniTileID)

		object.lavaAniTileID++
		Copy16x16Tile(364, object.lavaAniTileID)
	else
		object.lavaTileFrame <<= 2

		object.lavaAniTileID += object.lavaTileFrame
		Copy16x16Tile(362, object.lavaAniTileID)

		object.lavaAniTileID++
		Copy16x16Tile(363, object.lavaAniTileID)

		object.lavaAniTileID++
		Copy16x16Tile(364, object.lavaAniTileID)

		object.lavaAniTileID++
		Copy16x16Tile(365, object.lavaAniTileID)
	end if

	// BG Candles
	temp0 = object.candleAnimTimer
	temp0 >>= 4
	temp0 <<= 1
	temp0 += 446
	Copy16x16Tile(360, temp0)
	temp0++
	Copy16x16Tile(361, temp0)
	temp0++
	object.candleAnimTimer++
	object.candleAnimTimer &= 0x3F

	// Lava tiles
	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		temp1 = player[currentPlayer].xpos
		temp1 >>= 16
		temp2 = player[currentPlayer].ypos
		temp2 >>= 16
		temp2 += 4
		Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_ANGLEB)
		if temp0 == TILE_LAVA
			if player[currentPlayer].shield != SHIELD_FIRE
				CallFunction(PlayerObject_Hit)
			end if
		end if
	next
end event


event ObjectDraw
	if screen.yoffset > 458
		temp0 = screen.yoffset
		temp0 -= 458
		temp0 *= 0xC000
		tileLayer[1].scrollPos = temp0
	else
		tileLayer[1].scrollPos = 0
	end if
end event


event ObjectStartup

	// Set the music track for this Stage
	SetMusicTrack("Marble.ogg", TRACK_STAGE, MUSIC_LOOP_MZ)
	SpeedUpMusic = MZSetup_SpeedUpMusic
	SlowDownMusic = MZSetup_SpeedUpMusic

	// Ricky and Rocky are the inhabitants along this flamed quest
	animalType1 = TypeName[Ricky]
	animalType2 = TypeName[Rocky]

	// Set object 10 to an MZ Setup object
	object[SLOT_ZONESETUP].type = TypeName[MZ Setup]
	object[SLOT_ZONESETUP].priority = PRIORITY_ACTIVE
	object[SLOT_ZONESETUP].drawOrder = 0

	// Different parallax between the different acts
	// (Act 1 parallax info is built into the normal MZ BG file)
	switch stage.actNum
	case 2
		hParallax[0].scrollPos = 0x1000000
		hParallax[1].scrollPos = 0x2000000
		hParallax[2].scrollPos = 0x2000000
		hParallax[3].scrollPos = 0x2000000
		hParallax[4].scrollPos = 0x2000000
		hParallax[5].scrollPos = 0x2000000
		hParallax[6].scrollPos = 0x2000000
		break
	
	case 3
		hParallax[0].scrollPos = 0x4000000
		hParallax[1].scrollPos = 0x1000000
		hParallax[2].scrollPos = 0x1000000
		hParallax[3].scrollPos = 0x1000000
		hParallax[4].scrollPos = 0x1000000
		hParallax[5].scrollPos = 0x1000000
		hParallax[6].scrollPos = 0x1000000
		break
	end switch

	if options.attractMode == true
		switch stage.playerListPos
		case PlayerName[SONIC]
			if credits.screen == false
				PlayerObject_ReplayTable = MZSetup_replay_attract_S
				PlayerObject_ReplaySize = 194
				PlayerObject_ReplayLength = 1660
			else
				PlayerObject_ReplayTable = MZSetup_replay_credits_ST
				PlayerObject_ReplaySize = 56
				PlayerObject_ReplayLength = 540
			end if
			break

		case PlayerName[TAILS]
			if credits.screen == false
				PlayerObject_ReplayTable = MZSetup_replay_attract_T
				PlayerObject_ReplaySize = 206
				PlayerObject_ReplayLength = 1800
			else
				PlayerObject_ReplayTable = MZSetup_replay_credits_ST
				PlayerObject_ReplaySize = 56
				PlayerObject_ReplayLength = 540
			end if
			break

		case PlayerName[KNUCKLES]
			if credits.screen == false
				PlayerObject_ReplayTable = MZSetup_replay_attract_K
				PlayerObject_ReplaySize = 162
				PlayerObject_ReplayLength = 1800
			else
				PlayerObject_ReplayTable = MZSetup_replay_credits_K
				PlayerObject_ReplaySize = 62
				PlayerObject_ReplayLength = 540
			end if
			break

		end switch

		CallFunction(PlayerObject_InitReplay)
	end if
end event


event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
