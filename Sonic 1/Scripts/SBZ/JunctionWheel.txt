// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: Junction Wheel Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// Aliases

// value 0 is unused
private alias object.value1 : object.spinDir
private alias object.value2 : object.directionChanged

// button alias
private alias object.value0 : PushButton.stood

// Function declarations
reserve function JunctionWheel_DebugDraw
reserve function JunctionWheel_DebugSpawn
reserve function JunctionWheel_HandleWheelMove

// Static Values

// Tables

function JunctionWheel_DebugDraw
	DrawSprite(0)
end function


function JunctionWheel_DebugSpawn
	CreateTempObject(TypeName[Junction Wheel], 0, object.xpos, object.ypos)
end function


function JunctionWheel_HandleWheelMove
	Cos(object[currentPlayer].xpos, object.rotation)
	object[currentPlayer].xpos *= object[currentPlayer].speed
	object[currentPlayer].xpos += object.xpos

	Sin(object[currentPlayer].ypos, object.rotation)
	object[currentPlayer].ypos *= object[currentPlayer].speed
	object[currentPlayer].ypos += object.ypos

	if object[currentPlayer].speed < -0x1000
		object[currentPlayer].speed += 512
	end if
end function


event ObjectMain
	if PushButton[-1].stood == true
		if object.directionChanged == false
			object.directionChanged = true
			object.spinDir ^= 1
		end if
	else
		object.directionChanged = false
	end if

	if object.spinDir == 0
		object.rotation -= 4
	else
		object.rotation += 4
	end if
	object.rotation &= 0x1FF

	temp0 = object.rotation
	temp0 += 0x30
	temp0 &= 0x1FF
	temp0 >>= 6

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		if object[currentPlayer].state != PlayerObject_Blank
			switch temp0
			case 1
				BoxCollisionTest(C_TOUCH, object.entityPos, -40, -40, -16, -8, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				if checkResult == true
					PlaySfx(SfxName[Rolling], false)
					object[currentPlayer].state = PlayerObject_Blank
					object[currentPlayer].animation = ANI_JUMPING
					object[currentPlayer].animationSpeed = 0xF0
					object[currentPlayer].tileCollisions = false
					object[currentPlayer].gravity = GRAVITY_AIR
					object[currentPlayer].speed = -0x1C00
				end if

				BoxCollisionTest(C_BOX, object.entityPos, 16, -56, 40, 56, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				if object[currentPlayer].yvel < 0
					BoxCollisionTest(C_BOX, object.entityPos, -40, 32, 40, 56, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				end if
				break

			case 0
			case 2
			case 3
			case 4
			case 6
			case 7
				BoxCollisionTest(C_BOX, object.entityPos, -40, -56, -16, 56, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				BoxCollisionTest(C_BOX, object.entityPos, 16, -56, 40, 56, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				if object[currentPlayer].yvel < 0
					BoxCollisionTest(C_BOX, object.entityPos, -40, 32, 40, 56, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				end if
				break

			case 5
				if object[currentPlayer].xvel < 0
					BoxCollisionTest(C_TOUCH, object.entityPos, 16, 8, 38, 40, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
					if checkResult == true
						PlaySfx(SfxName[Rolling], false)
						object[currentPlayer].state = PlayerObject_Blank
						object[currentPlayer].animation = ANI_JUMPING
						object[currentPlayer].animationSpeed = 0xF0
						object[currentPlayer].tileCollisions = false
						object[currentPlayer].gravity = GRAVITY_AIR
						object[currentPlayer].speed = -0x1800
					end if
				end if

				BoxCollisionTest(C_BOX, object.entityPos, -40, -56, -16, 56, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				if object[currentPlayer].yvel < 0
					BoxCollisionTest(C_BOX, object.entityPos, -40, 32, 40, 56, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				end if
				break
			end switch
		else
			if object[currentPlayer].type != TypeName[Debug Mode]
				CallFunction(JunctionWheel_HandleWheelMove)
				if object[currentPlayer].speed == -0x1000
					if object.rotation == 0x180
						object[currentPlayer].state = PlayerObject_HandleAir
						object[currentPlayer].animation = ANI_JUMPING
						object[currentPlayer].tileCollisions = true
						object[currentPlayer].speed = 0
						object[currentPlayer].xvel = 0
						object[currentPlayer].yvel = 0x80000
						object[currentPlayer].gravity = GRAVITY_AIR
						PlaySfx(SfxName[Release], false)
					end if

					if object.spinDir == 1
						if object.rotation == 0x11C
							object[currentPlayer].state = PlayerObject_HandleAir
							object[currentPlayer].animation = ANI_JUMPING
							object[currentPlayer].tileCollisions = true
							object[currentPlayer].speed = 0x80000
							object[currentPlayer].xvel = 0x80000
							object[currentPlayer].yvel = 0x40000
							object[currentPlayer].gravity = GRAVITY_AIR
							PlaySfx(SfxName[Release], false)
						end if
					end if
				end if
			end if
		end if
	next
end event


event ObjectDraw
	DrawSpriteFX(0, FX_ROTATE, object.xpos, object.ypos)
	DrawSprite(1)
end event


event ObjectStartup
	LoadSpriteSheet("SBZ/Objects.gif")
	SpriteFrame(-56, -24, 48, 48, 1, 261)
	SpriteFrame(-56, -56, 112, 112, 399, 284)
	SetTableValue(TypeName[Junction Wheel], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(JunctionWheel_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(JunctionWheel_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++
end event

event RSDKDraw
	DrawSprite(0)
end event

event RSDKLoad
	LoadSpriteSheet("SBZ/Objects.gif")
	SpriteFrame(-56, -24, 48, 48, 1, 261)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
