// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: SBZ Setup Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// Aliases

// value0 is inused 
private alias object.value1 : object.processBG

private alias object.value2 : object.aniTilesTimerA
private alias object.value3 : object.aniTilesTimerB

private alias object.value4  : object.palRotateTimerAct1

private alias object.value5  : object.palTimerA
private alias object.value6  : object.palTimerB
private alias object.value7  : object.palTimerC
private alias object.value8  : object.palTimerD
private alias object.value9  : object.palTimerE
// value10 is inused 
private alias object.value11 : object.palTimerF
private alias object.value12 : object.palTimerG

private alias object.value13 : object.palIndexA
private alias object.value14 : object.palIndexB
private alias object.value15 : object.palIndexC
private alias object.value16 : object.palIndexD
private alias object.value17 : object.palIndexE
// value18 is inused 
private alias object.value19 : object.palIndexF
private alias object.value20 : object.palIndexG


// Tracks
private alias 0 : TRACK_STAGE
private alias 2 : TRACK_INVINCIBLE

// Music Events
private alias 25 : SLOT_MUSICEVENT_CHANGE
private alias 26 : SLOT_MUSICEVENT_BOSS

private alias 0 : MUSICEVENT_FADETOBOSS
private alias 1 : MUSICEVENT_FADETOSTAGE
private alias 2 : MUSICEVENT_TRANSITION

private alias 0 : MUSICEVENT_FLAG_NOCHANGE
private alias 1 : MUSICEVENT_FLAG_SPEEDUP
private alias 2 : MUSICEVENT_FLAG_SLOWDOWN

// Function declarations
reserve function SBZSetup_BGEffectsAct1
reserve function SBZSetup_BGEffectsAct2
reserve function SBZSetup_SpeedUpMusic
reserve function SBZSetup_SlowDownMusic

// Static Values
public value SBZSetup_value31 = 0;
public value SBZSetup_value30 = 0;
public value SBZSetup_value29 = 0;

private alias SBZSetup_value29 : SBZSetup_electricOrbFrame
private alias SBZSetup_value30 : SBZSetup_electricOrbTimer
private alias SBZSetup_value31 : SBZSetup_platformTimer

// Tables
private table SBZSetup_palTableB_1
	0x404000, 0xA0E0, 0x404000, 0xA0E0, 0x80E000, 0x80E000, 0x404000, 0xE040E0
end table

private table SBZSetup_palTableC_1
	0xE0E000, 0xE08000, 0xE00000, 0x800000, 0x800000, 0xE00000, 0xE08000, 0xE0E000
end table

private table SBZSetup_palTableD_1
	0xA00000, 0xA00000, 0x800000, 0x600000, 0x400000, 0x400000, 0x600000, 0x800000
end table

private table SBZSetup_palTableE_1
	0xE00000, 0xE00000, 0xA00000, 0x800000, 0x600000, 0x600000, 0x800000, 0xA00000
end table

private table SBZSetup_palTableB_2
	0x60E0C0, 0x60E0C0, 0x40C0A0, 0x20A080, 0x8060, 0x8060, 0x20A080, 0x40C0A0
end table

private table SBZSetup_palTableF_1
	0xA0E0, 0x6080E0, 0xA060E0, 0xE040E0, 0xE08080, 0xE0A040, 0xE0C020, 0xE0E000, 0xE0E000, 0xE0C020, 0xE0A040, 0xE08080, 0xE040E0, 0xA060E0, 0x6080E0, 0xA0E0
end table

private table SBZSetup_palTableG_1
	0xA0E0, 0xA0E0, 0x4060A0, 0xA04060, 0xE00000, 0xE00000, 0xA04060, 0x4060A0
end table

private table SBZSetup_electricOrbDelayTable
	20, 3, 1, 2, 3, 3, 20, 3, 1, 2, 3, 3, 20, 3, 1, 2, 3, 3, 20, 3, 1, 2, 3, 3
end table

private table SBZSetup_palTableA_1
	0xE0A0E0, 0xE040E0, 0x800080
end table

private table SBZSetup_palTableA_2
	0xE040E0, 0x800080, 0xE0A0E0
end table

private table SBZSetup_palTableA_3
	0x800080, 0xE0A0E0, 0xE040E0
end table

private table SBZSetup_replay_credits_STK_2
	0x15700000, 0x16C0000
	0b00000000, 6, 
	0b00000100, 194
	0b00000000, 187
	0b00000100, 35
	0b00000000, 14
	0b00000100, 10
	0b00000000, 24
	0b00000100, 29
	0b00000000, 11
	0b00001000, 198
end table

private table SBZSetup_replay_credits_STK_1
	0x1B00000, 0x72C0000
	0b00000000, 63
	0b00001000, 18
	0b00000000, 113
	0b00001000, 46
	0b00111000, 1
	0b00101000, 7
	0b00001000, 96
	0b00000010, 47
	0b00000000, 43
	0b00001000, 34
	0b00111000, 1
	0b00101000, 16
	0b00100000, 8
	0b00101000, 55
end table

function SBZSetup_BGEffectsAct1
	if object.aniTilesTimerA < 65
		temp0 = object.aniTilesTimerA
		temp0 &= 7
		if temp0 == 0
			temp0 = object.aniTilesTimerA
			temp0 &= 63
			temp0 >>= 3
			temp0 <<= 2
			temp0 += 604
			Copy16x16Tile(592, temp0)
			temp0++
			Copy16x16Tile(593, temp0)
			temp0++
			Copy16x16Tile(594, temp0)
		end if
	end if
	object.aniTilesTimerA++
	object.aniTilesTimerA %= 192

	if object.aniTilesTimerB < 65
		temp0 = object.aniTilesTimerB
		temp0 &= 7
		if temp0 == 0
			temp0 = object.aniTilesTimerB
			temp0 &= 63
			temp0 >>= 3
			temp0 <<= 2
			temp0 += 604
			Copy16x16Tile(596, temp0)
			temp0++
			Copy16x16Tile(597, temp0)
			temp0++
			Copy16x16Tile(598, temp0)
		end if
	end if
	object.aniTilesTimerB++
	object.aniTilesTimerB %= 144
	
	object.palRotateTimerAct1++
	if object.palRotateTimerAct1 == 2
		object.palRotateTimerAct1 = 0
		RotatePalette(0, 172, 174, 1)
	end if

	object.palTimerD++
	if object.palTimerD == 15
		object.palTimerD = 0
		object.palIndexD++
		object.palIndexD &= 7
		GetTableValue(temp0, object.palIndexD, SBZSetup_palTableD_1)
		SetPaletteEntry(0, 183, temp0)
	end if

	object.palTimerE++
	if object.palTimerE == 12
		object.palTimerE = 0
		object.palIndexE++
		object.palIndexE &= 7
		GetTableValue(temp0, object.palIndexE, SBZSetup_palTableE_1)
		SetPaletteEntry(0, 184, temp0)
	end if
	
	object.palTimerF++
	if object.palTimerF == 29
		object.palTimerF = 0
		object.palIndexF++
		object.palIndexF &= 15
		GetTableValue(temp0, object.palIndexF, SBZSetup_palTableF_1)
		SetPaletteEntry(0, 191, temp0)
	end if
end function


function SBZSetup_BGEffectsAct2
	RotatePalette(0, 172, 174, true)

	object.palTimerG++
	if object.palTimerG == 10
		object.palTimerG = 0
		object.palIndexG++
		object.palIndexG &= 7
		GetTableValue(temp0, object.palIndexG, SBZSetup_palTableG_1)
		SetPaletteEntry(0, 184, temp0)
	end if

	// Process Conveyor Belts
	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		if object[currentPlayer].gravity == GRAVITY_GROUND
			temp2 = object[currentPlayer].ypos
			temp2 >>= 16
			temp2 += object[currentPlayer].collisionBottom
			temp2 += 2
			temp1 = object[currentPlayer].xpos
			temp1 >>= 16
			temp1 += object[currentPlayer].collisionLeft
			temp3 = 0
			Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_ANGLEB)
			if temp0 == 1
				Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_DIRECTION)
				if temp0 == 0
					temp3 += 0x20000
				else
					temp3 -= 0x20000
				end if
			end if
			
			temp1 = object[currentPlayer].xpos
			temp1 >>= 16
			temp1 += object[currentPlayer].collisionRight
			Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_ANGLEB)
			if temp0 == 1
				Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_DIRECTION)
				if temp0 == 0
					temp3 += 0x20000
					if temp3 > 0x20000
						temp3 = 0x20000
					end if
				else
					temp3 -= 0x20000
					if temp3 < -0x20000
						temp3 = -0x20000
					end if
				end if
			end if
			object[currentPlayer].xpos += temp3
		end if
	next
end function


function SBZSetup_SpeedUpMusic
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436)
			SwapMusicTrack("ScrapBrain_F.ogg", TRACK_STAGE, true, 8000)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("ScrapBrain_F.ogg", TRACK_STAGE, true)
			SwapMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436, 8000)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SPEEDUP
	end if
end function


function SBZSetup_SlowDownMusic
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528)
			SwapMusicTrack("ScrapBrain.ogg", TRACK_STAGE, true, 12500)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("ScrapBrain.ogg", TRACK_STAGE, true)
			SwapMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528, 12500)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SLOWDOWN
	end if
end function


event ObjectMain
	CallFunction(object.processBG)

	SBZSetup_platformTimer++
	if SBZSetup_electricOrbTimer > 1
		SBZSetup_electricOrbTimer--
	else
		SBZSetup_electricOrbFrame++
		SBZSetup_electricOrbFrame %= 24
		GetTableValue(SBZSetup_electricOrbTimer, SBZSetup_electricOrbFrame, SBZSetup_electricOrbDelayTable)
	end if

	object.palTimerA++
	if object.palTimerA == 4
		object.palTimerA = 0
		object.palIndexA++
		object.palIndexA %= 3
		GetTableValue(temp0, object.palIndexA, SBZSetup_palTableA_1)
		SetPaletteEntry(0, 188, temp0)
		GetTableValue(temp0, object.palIndexA, SBZSetup_palTableA_2)
		SetPaletteEntry(0, 189, temp0)
		GetTableValue(temp0, object.palIndexA, SBZSetup_palTableA_3)
		SetPaletteEntry(0, 190, temp0)
	end if

	object.palTimerB++
	if object.palTimerB == 8
		object.palTimerB = 0
		object.palIndexB++
		object.palIndexB &= 7
		GetTableValue(temp0, object.palIndexB, SBZSetup_palTableB_1)
		SetPaletteEntry(0, 168, temp0)
		GetTableValue(temp0, object.palIndexB, SBZSetup_palTableB_2)
		SetPaletteEntry(0, 185, temp0)
	end if

	object.palTimerC++
	if object.palTimerC == 14
		object.palTimerC = 0
		object.palIndexC++
		object.palIndexC &= 7
		GetTableValue(temp0, object.palIndexC, SBZSetup_palTableC_1)
		SetPaletteEntry(0, 169, temp0)
	end if
end event


event ObjectStartup
	if stage.actNum < 5

		// If in acts 1-4, then play the SBZ music
		SetMusicTrack("ScrapBrain.ogg", TRACK_STAGE, true)
		SpeedUpMusic = SBZSetup_SpeedUpMusic
		SlowDownMusic = SBZSetup_SlowDownMusic

	else
		// Act 5, play the Final Zone music
		SetMusicTrack("Final.ogg", TRACK_STAGE, 84680)
	end if

	// Cucky and Pocky are the animals that appear in Scrab Brain
	animalType1 = TypeName[Cucky]
	animalType2 = TypeName[Pocky]

	object[10].type = TypeName[SBZ Setup]
	object[10].priority = PRIORITY_ACTIVE
	object[10].drawOrder = 0

	// Init anim tiles
	Copy16x16Tile(592, 604)
	Copy16x16Tile(593, 605)
	Copy16x16Tile(594, 606)
	Copy16x16Tile(596, 604)
	Copy16x16Tile(597, 605)
	Copy16x16Tile(598, 606)

	// Use different palette cycles and such based on the act
	switch stage.actNum
	case 1
		object[10].processBG = SBZSetup_BGEffectsAct1
		break

	case 2
	case 5
		SetPaletteEntry(0, 172, 0xC0E0E0)
		SetPaletteEntry(0, 173, 0x60A0A0)
		SetPaletteEntry(0, 174, 0x006060)
		object[10].processBG = SBZSetup_BGEffectsAct2
		break

	end switch

	SBZSetup_electricOrbFrame = 0
	GetTableValue(SBZSetup_electricOrbTimer, SBZSetup_electricOrbFrame, SBZSetup_electricOrbDelayTable)
	
	if options.attractMode == true
		if credits.screen == 6
			PlayerObject_ReplayTable = SBZSetup_replay_credits_STK_2 // All Characters
			PlayerObject_ReplaySize = 22
		else
			PlayerObject_ReplayTable = SBZSetup_replay_credits_STK_1 // All Characters
			PlayerObject_ReplaySize = 30
		end if

		PlayerObject_ReplayLength = 540
		CallFunction(PlayerObject_InitReplay)
	end if
end event

event RSDKDraw
	DrawSprite(0)
end event

event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
