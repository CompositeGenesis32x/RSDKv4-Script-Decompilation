// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: LZ Setup Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// Aliases
private alias object.value0  : object.deformTimer
private alias object.value1  : object.paletteTimer1
private alias object.value2  : object.beltPaletteTimer
private alias object.value3  : object.beltPaletteIndex
private alias object.value4  : object.waterfallLoopTimer
private alias object.value5  : object.playingWaterfallLoop
private alias object.value6  : object.color_R
private alias object.value7  : object.color_G
private alias object.value8  : object.color_B
private alias object.value9  : object.toneDown_R
private alias object.value10 : object.toneDown_G
private alias object.value11 : object.toneDown_B

private alias 1 : TILE_WATERSLIDE

// Tracks
private alias 0 : TRACK_STAGE
private alias 2 : TRACK_INVINCIBLE
private alias 6 : TRACK_DROWNING

// Music Events
private alias 25 : SLOT_MUSICEVENT_CHANGE
private alias 26 : SLOT_MUSICEVENT_BOSS

private alias 0 : MUSICEVENT_FADETOBOSS
private alias 1 : MUSICEVENT_FADETOSTAGE
private alias 2 : MUSICEVENT_TRANSITION

private alias 0 : MUSICEVENT_FLAG_NOCHANGE
private alias 1 : MUSICEVENT_FLAG_SPEEDUP
private alias 2 : MUSICEVENT_FLAG_SLOWDOWN

// Function declarations
reserve function LZSetup_setupRippleDeform1
reserve function LZSetup_setupRippleDeform2
reserve function LZSetup_toneDownPalette
reserve function LZSetup_InitSuperSonicPal
reserve function LZSetup_InitSuperTailsPal
reserve function LZSetup_InitSuperKnuxPal
reserve function LZSetup_SpeedUpMusicLZ
reserve function LZSetup_SlowDownMusicLZ
reserve function LZSetup_SpeedUpMusicSBZ3
reserve function LZSetup_SlowDownMusicSBZ3

// Static Values
public value LZSetup_value30 = 0;
public value LZSetup_value29 = 0;

private alias LZSetup_value29 : LZSetup_flashTimer
private alias LZSetup_value30 : LZSetup_beltDirection

// Tables
public table LZSetup_beltPalDelayTable
	2, 2, 1
end table

public table LZSetup_demoTable
	0xA000000, 0x62C0000
	0b00001000, 49
	0b00000000, 9
	0b00001000, 102
	0b00000000, 86
	0b00000010, 13
	0b00000000, 11
	0b00000010, 10
	0b00000000, 9
	0b00000010, 13
	0b00000000, 7
	0b00001000, 13
	0b00111000, 1
	0b00101000, 3
	0b00001000, 38
	0b00000000, 27
	0b00000001, 13
	0b00000000, 13
	0b00000010, 13
	0b00000000, 10
	0b00000010, 7
	0b00001000, 9
	0b00111000, 1
	0b00101000, 4
	0b00001000, 27
	0b00000000, 13
	0b00000010, 12
	0b00000000, 12
	0b00000010, 10
	0b00000000, 15
	0b00000010, 7
	0b00000000, 14
	0b00000010, 10
	0b00000000, 35
	0b00110000, 1
	0b00100000, 4
	0b00000000, 8
	0b00000010, 6
end table

function LZSetup_setupRippleDeform1

	stage.deformationData1[arrayPos0] = 1
	arrayPos0++

	stage.deformationData1[arrayPos0] = 1
	arrayPos0++

	stage.deformationData1[arrayPos0] = 2
	arrayPos0++

	stage.deformationData1[arrayPos0] = 2
	arrayPos0++

	stage.deformationData1[arrayPos0] = 3
	arrayPos0++

	stage.deformationData1[arrayPos0] = 3
	arrayPos0++

	stage.deformationData1[arrayPos0] = 3
	arrayPos0++

	stage.deformationData1[arrayPos0] = 3
	arrayPos0++

	stage.deformationData1[arrayPos0] = 2
	arrayPos0++

	stage.deformationData1[arrayPos0] = 2
	arrayPos0++

	stage.deformationData1[arrayPos0] = 1
	arrayPos0++

	stage.deformationData1[arrayPos0] = 1
	arrayPos0++

end function


function LZSetup_setupRippleDeform2

	stage.deformationData1[arrayPos0] = -1
	arrayPos0++

	stage.deformationData1[arrayPos0] = -1
	arrayPos0++

	stage.deformationData1[arrayPos0] = -2
	arrayPos0++

	stage.deformationData1[arrayPos0] = -2
	arrayPos0++

	stage.deformationData1[arrayPos0] = -3
	arrayPos0++

	stage.deformationData1[arrayPos0] = -3
	arrayPos0++

	stage.deformationData1[arrayPos0] = -3
	arrayPos0++

	stage.deformationData1[arrayPos0] = -3
	arrayPos0++

	stage.deformationData1[arrayPos0] = -2
	arrayPos0++

	stage.deformationData1[arrayPos0] = -2
	arrayPos0++

	stage.deformationData1[arrayPos0] = -1
	arrayPos0++

	stage.deformationData1[arrayPos0] = -1
	arrayPos0++

end function


function LZSetup_toneDownPalette

	// Wacky function to take a normal color and turn it into an underwater color
	object.color_R = temp1
	object.color_R >>= 16

	object.color_G = temp1
	object.color_G >>= 8
	object.color_G &= 0xFF

	object.color_B = temp1
	object.color_B &= 0xFF

	object.toneDown_R = temp2
	object.toneDown_R >>= 16

	object.toneDown_G = temp2
	object.toneDown_G >>= 8
	object.toneDown_G &= 0xFF

	object.toneDown_B = temp2
	object.toneDown_B &= 0xFF

	// Minimum of 1
	if object.toneDown_R == 0
		object.toneDown_R = 1
	end if

	if object.toneDown_G == 0
		object.toneDown_G = 1
	end if

	if object.toneDown_B == 0
		object.toneDown_B = 1
	end if

	object.color_R <<= 8
	object.color_G <<= 8
	object.color_B <<= 8

	object.color_R /= object.toneDown_R
	object.color_G /= object.toneDown_G
	object.color_B /= object.toneDown_B

	if object.color_R == 0
		object.color_R = 0x100
	end if

	if object.color_G == 0
		object.color_G = 0x100
	end if

	if object.color_B == 0
		object.color_B = 0x100
	end if
end function


function LZSetup_InitSuperSonicPal
	temp0 = 0

	GetPaletteEntry(1, 2, temp1)
	SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
	temp0++

	GetPaletteEntry(1, 3, temp1)
	SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
	temp0++

	GetPaletteEntry(1, 4, temp1)
	SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
	temp0++

	GetPaletteEntry(1, 5, temp1)
	SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
	temp0++

	while temp0 < 64
		GetPaletteEntry(0, 2, temp1)
		GetPaletteEntry(1, 2, temp2)

		CallFunction(LZSetup_toneDownPalette)
		GetTableValue(temp1, temp0, PlayerObject_SonicSuperPal)

		// Get the green in the color
		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF
		
		// Get the blue in the color
		temp3 = temp1
		temp3 &= 0xFF

		// Get the red in the color
		temp1 >>= 16

		temp1 *= 0xE0
		temp1 /= object.color_R

		temp2 *= 0xE0
		temp2 /= object.color_G

		temp3 *= 0xE0
		temp3 /= object.color_B

		// Max of 0xE0
		//  -> Note that this game uses the "raw" colors from the original game rather than
		//     "corrected" colors seen in many emulators
		//     With this system, the brighest a color can be is E0E0E0, with all
		//     the reds, greens, and blues having a max of 224, or E0
		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0
		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		if temp2 > 0xE0
			temp2 = 0xE0
		end if
		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)

		// Process gets repeated a few more times now, pretty much everything is the same aside from the division part
		temp0++

		GetPaletteEntry(0, 3, temp1)
		GetPaletteEntry(1, 3, temp2)

		CallFunction(LZSetup_toneDownPalette)
		GetTableValue(temp1, temp0, PlayerObject_SonicSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0xE8
		temp1 /= object.color_R

		temp2 *= 0xE8
		temp2 /= object.color_G
		
		temp3 *= 0xE8
		temp3 /= object.color_B
		
		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0
		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		if temp2 > 0xE0
			temp2 = 0xE0
		end if
		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)



		temp0++
		GetPaletteEntry(0, 4, temp1)
		GetPaletteEntry(1, 4, temp2)
		CallFunction(LZSetup_toneDownPalette)
		GetTableValue(temp1, temp0, PlayerObject_SonicSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16
		
		temp1 *= 0xF4
		temp1 /= object.color_R

		temp2 *= 0xF4
		temp2 /= object.color_G

		temp3 *= 0xF4
		temp3 /= object.color_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0
		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		if temp2 > 0xE0
			temp2 = 0xE0
		end if
		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)



		temp0++
		GetPaletteEntry(0, 5, temp1)
		GetPaletteEntry(1, 5, temp2)
		CallFunction(LZSetup_toneDownPalette)
		GetTableValue(temp1, temp0, PlayerObject_SonicSuperPal)
		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0x100
		temp1 /= object.color_R

		temp2 *= 0x100
		temp2 /= object.color_G

		temp3 *= 0x100
		temp3 /= object.color_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0
		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		if temp2 > 0xE0
			temp2 = 0xE0
		end if
		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)

		temp0++
	loop
end function


function LZSetup_InitSuperTailsPal
	temp0 = 0

	GetPaletteEntry(1, 13, temp1)
	SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
	temp0++

	GetPaletteEntry(1, 17, temp1)
	SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
	temp0++

	GetPaletteEntry(1, 18, temp1)
	SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
	temp0++

	GetPaletteEntry(1, 16, temp1)
	SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
	temp0++

	while temp0 < 24
		GetPaletteEntry(0, 13, temp1)
		GetPaletteEntry(1, 13, temp2)
		CallFunction(LZSetup_toneDownPalette)
		GetTableValue(temp1, temp0, PlayerObject_TailsSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0xF8
		temp1 /= object.color_R

		temp2 *= 0xF8
		temp2 /= object.color_G

		temp3 *= 0xF8
		temp3 /= object.color_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0
		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		if temp2 > 0xE0
			temp2 = 0xE0
		end if
		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)



		temp0++
		GetPaletteEntry(0, 17, temp1)
		GetPaletteEntry(1, 17, temp2)
		CallFunction(LZSetup_toneDownPalette)
		GetTableValue(temp1, temp0, PlayerObject_TailsSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0x100
		temp1 /= object.color_R

		temp2 *= 0x100
		temp2 /= object.color_G

		temp3 *= 0x100
		temp3 /= object.color_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0
		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		if temp2 > 0xE0
			temp2 = 0xE0
		end if
		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)



		temp0++
		GetPaletteEntry(0, 18, temp1)
		GetPaletteEntry(1, 18, temp2)
		CallFunction(LZSetup_toneDownPalette)
		GetTableValue(temp1, temp0, PlayerObject_TailsSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0x100
		temp1 /= object.color_R

		temp2 *= 0x100
		temp2 /= object.color_G

		temp3 *= 0x100
		temp3 /= object.color_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0
		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		if temp2 > 0xE0
			temp2 = 0xE0
		end if
		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)



		temp0++
		GetPaletteEntry(0, 16, temp1)
		GetPaletteEntry(1, 16, temp2)
		CallFunction(LZSetup_toneDownPalette)
		GetTableValue(temp1, temp0, PlayerObject_TailsSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0x100
		temp1 /= object.color_R

		temp2 *= 0x100
		temp2 /= object.color_G

		temp3 *= 0x100
		temp3 /= object.color_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0
		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		if temp2 > 0xE0
			temp2 = 0xE0
		end if
		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)

		temp0++
	loop
end function


function LZSetup_InitSuperKnuxPal
	temp0 = 0
	GetPaletteEntry(1, 26, temp1)
	SetTableValue(temp1, temp0, PlayerObject_KnuxSuperAltPal)
	temp0++
	GetPaletteEntry(1, 27, temp1)
	SetTableValue(temp1, temp0, PlayerObject_KnuxSuperAltPal)
	temp0++
	GetPaletteEntry(1, 28, temp1)
	SetTableValue(temp1, temp0, PlayerObject_KnuxSuperAltPal)
	temp0++
end function


function LZSetup_SpeedUpMusicLZ
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == 0
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436)
			SwapMusicTrack("Labyrinth_F.ogg", TRACK_STAGE, 67538, 8000)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("Labyrinth_F.ogg", TRACK_STAGE, 67538)
			SwapMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436, 8000)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
			SetMusicTrack("Labyrinth_F.ogg", TRACK_STAGE, 67538)
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SPEEDUP
	end if
end function


function LZSetup_SlowDownMusicLZ
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == 0
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528)
			SwapMusicTrack("Labyrinth.ogg", TRACK_STAGE, 84444, 12500)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("Labyrinth.ogg", TRACK_STAGE, 84444)
			SwapMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528, 12500)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
			SetMusicTrack("Labyrinth.ogg", TRACK_STAGE, 84444)
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SLOWDOWN
	end if
end function


function LZSetup_SpeedUpMusicSBZ3
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == 0
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436)
			SwapMusicTrack("ScrapBrain_F.ogg", TRACK_STAGE, true, 8000)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("ScrapBrain_F.ogg", TRACK_STAGE, true)
			SwapMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436, 8000)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
			SetMusicTrack("ScrapBrain_F.ogg", TRACK_STAGE, true)
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30436)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SPEEDUP
	end if
end function


function LZSetup_SlowDownMusicSBZ3
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility.ogg", 2, 39528)
			SwapMusicTrack("ScrapBrain.ogg", TRACK_STAGE, true, 12500)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("ScrapBrain.ogg", TRACK_STAGE, true)
			SwapMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528, 12500)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
			SetMusicTrack("ScrapBrain.ogg", TRACK_STAGE, true)
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 39528)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SLOWDOWN
	end if
end function


event ObjectMain

	object.deformTimer++
	if object.deformTimer > 1
		tileLayer[0].deformationOffsetW++
		tileLayer[1].deformationOffsetW++
		object.deformTimer = 0
	end if

	object.paletteTimer1++
	if object.paletteTimer1 == 3
		object.paletteTimer1 = 0
		RotatePalette(0, 171, 174, false)
		RotatePalette(1, 171, 174, false)
	end if

	if object.beltPaletteTimer > 0
		object.beltPaletteTimer--
	else
		object.beltPaletteIndex++
		object.beltPaletteIndex %= 3
		GetTableValue(object.beltPaletteTimer, object.beltPaletteIndex, LZSetup_beltPalDelayTable)

		RotatePalette(0, 187, 189, LZSetup_beltDirection)
		RotatePalette(1, 187, 189, LZSetup_beltDirection)
	end if

	// Handle Player Tile Interactions
	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)

		temp1 = object[currentPlayer].xpos
		temp1 >>= 16

		temp2 = object[currentPlayer].ypos
		temp2 >>= 16

		temp2 += object[currentPlayer].collisionBottom
		temp2--

		Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_INDEX)

		CheckEqual(temp0, 71)
		temp3 = checkResult
		CheckEqual(temp0, 72)
		temp3 |= checkResult
		if temp3 == true
			CheckEqual(object[currentPlayer].state, PlayerObject_KnuxGlideLeft)
			temp3 = checkResult
			CheckEqual(object[currentPlayer].state, PlayerObject_KnuxGlideRight)
			temp3 |= checkResult
			CheckEqual(object[currentPlayer].state, PlayerObject_KnuxWallClimb)
			temp3 |= checkResult
			CheckEqual(object[currentPlayer].state, PlayerObject_KnuxLedgePullUp)
			temp3 |= checkResult
			if temp3 == true
				if object[currentPlayer].state == PlayerObject_KnuxGlideLeft
					FlipSign(object[currentPlayer].xvel)
					FlipSign(object[currentPlayer].speed)
				end if

				object[currentPlayer].state = PlayerObject_KnuxGlideDrop
				object[currentPlayer].animation = ANI_GLIDING_DROP
			end if
		end if


		if object[currentPlayer].gravity == GRAVITY_GROUND
			Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_ANGLEB)
			if temp0 == TILE_WATERSLIDE
				object[currentPlayer].state = PlayerObject_WaterSlide

				Get16x16TileInfo(temp0, temp1, temp2, TILEINFO_DIRECTION)
				switch temp0
				case FLIP_NONE
				case FLIP_Y
					object[currentPlayer].direction = FLIP_X
					break

				case FLIP_X
				case FLIP_XY
					object[currentPlayer].direction = FLIP_NONE
					break
				end switch
			end if
		end if
	next

	if object[0].state == PlayerObject_WaterSlide
		if object.waterfallLoopTimer == 0
			if object.playingWaterfallLoop == false
				PlaySfx(SfxName[Waterfall], false)
				StopSfx(SfxName[Waterfall Loop])
				object.playingWaterfallLoop = true
			else
				StopSfx(SfxName[Waterfall])
				PlaySfx(SfxName[Waterfall Loop], false)
			end if
		end if

		object.waterfallLoopTimer++
		object.waterfallLoopTimer &= 0x3F
	else
		if object.waterfallLoopTimer != 0
			object.waterfallLoopTimer++
			object.waterfallLoopTimer &= 0x3F
		else
			object.waterfallLoopTimer = 0
			object.playingWaterfallLoop = false
		end if
	end if

	if LZSetup_flashTimer > 0
		LZSetup_flashTimer--
	end if
end event


event ObjectDraw

	// Change the palette to the underwater one after the water level's Y Pos
	temp0 = stage.waterLevel
	temp0 -= screen.yoffset

	// Minimum of 0
	if temp0 < 0
		temp0 = 0
	end if

	// Maximum of the screen's Y size
	if temp0 > screen.ysize
		temp0 = screen.ysize
	end if

	// Set the above water palette from the upper part of the screen
	SetActivePalette(0, 0, temp0)

	// Set the underwater palette for the bottom part of the screen
	if LZSetup_flashTimer > 0
		// Use the lightning palette if needed
		SetActivePalette(2, temp0, screen.ysize)
	else
		// Otherwise use the normal water palette
		SetActivePalette(1, temp0, screen.ysize)
	end if

end event


event ObjectStartup

	// If in act 1-3, set the normal Labyrinth music
	if stage.actNum < 4
		// Set the speed up/slow down functions, too
		SetMusicTrack("Labyrinth.ogg", TRACK_STAGE, 84444)
		SpeedUpMusic = LZSetup_SpeedUpMusicLZ
		SlowDownMusic = LZSetup_SlowDownMusicLZ
	else
		// If in "act 4", or SBZ 3, then use Scrap Brain's music instead
		SetMusicTrack("ScrapBrain.ogg", TRACK_STAGE, true)
		SpeedUpMusic = LZSetup_SpeedUpMusicSBZ3
		SlowDownMusic = LZSetup_SlowDownMusicSBZ3
	end if

	// Pecky and Rocky are the inhabitants of this labyrinth
	animalType1 = TypeName[Pecky]
	animalType2 = TypeName[Rocky]

	// Set object slot 10 to be the LZ Setup object
	object[10].type = TypeName[LZ Setup]
	object[10].priority = PRIORITY_ACTIVE
	object[10].drawOrder = 0

	// Start the initial palette cycle stuff
	GetTableValue(object[10].beltPaletteTimer, 0, LZSetup_beltPalDelayTable)

	// Set stage deformation data
	// (FG layer properties)

	arrayPos0 = 0
	CallFunction(LZSetup_setupRippleDeform1)

	arrayPos0 = 128
	CallFunction(LZSetup_setupRippleDeform1)

	arrayPos0 = 160
	CallFunction(LZSetup_setupRippleDeform2)

	arrayPos0 = 0x100
	while arrayPos0 < 576
		arrayPos1 = arrayPos0
		arrayPos1 -= 0x100
		stage.deformationData1[arrayPos0] = stage.deformationData1[arrayPos1]
		arrayPos0++
	loop

	SetLayerDeformation(3, 128, 4, 0, 0, 0)

	if stage.actNum < 4
		// If in act 1-3, then only load the underwater palette
		LoadPalette("LZ_WaterPal.act", 1, 0, 0, 256)
	else
		// SBZ3: Load not only the water palette, but also the main stage palette
		LoadPalette("SBZ3_Pal.act", 0, 128, 128, 192)
		LoadPalette("SBZ3_WaterPal.act", 1, 0, 0, 256)
	end if
	
	// Set up Super colours
	CallFunction(LZSetup_InitSuperSonicPal)
	CallFunction(LZSetup_InitSuperTailsPal)
	CallFunction(LZSetup_InitSuperKnuxPal)

	// Load the eletric flash palette in case the player gets wet with a lightning shield
	LoadPalette("ElectricFlash.act", 2, 0, 0, 256)

	// Reset the flash timer
	LZSetup_flashTimer = 0

	if options.attractMode == true
		if credits.screen > 0
			PlayerObject_ReplayTable 	= LZSetup_demoTable
			PlayerObject_ReplaySize 	= 76
			PlayerObject_ReplayLength 	= 540
		end if
	
		CallFunction(PlayerObject_InitReplay)
	end if

end event

event RSDKDraw
	DrawSprite(0)
end event

event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
