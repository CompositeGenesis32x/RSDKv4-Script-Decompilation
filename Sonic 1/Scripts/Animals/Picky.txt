// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: Picky Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.propertyValue : object.delay

private alias object.value0 : object.timer // its this in ANIMAL_WAIT
private alias object.value0 : object.bounceDir // its this in every other state
private alias object.value1 : object.randomizeDir

private alias 0 : ANIMAL_WAIT
private alias 1 : ANIMAL_FALL
private alias 2 : ANIMAL_BOUNCING_NOBOUNDS
private alias 3 : ANIMAL_BOUNCING_SWAPDIR
private alias 4 : ANIMAL_BOUNCING_PLAYERDIR
private alias 5 : ANIMAL_BOUNCING

private alias 0x1C000  : ANIMAL_XVEL
private alias -0x30000 : ANIMAL_YVEL

// ========================
// Function Declarations
// ========================
reserve function Picky_DebugDraw
reserve function Picky_DebugSpawn

private function Picky_DebugDraw
	DrawSprite(2)
end function


private function Picky_DebugSpawn
	CreateTempObject(TypeName[Picky], 0, object.xpos, object.ypos)

	GetBit(temp0, object.direction, 0)
	if temp0 == false
		object[tempObjectPos].state = ANIMAL_BOUNCING_SWAPDIR
		object[tempObjectPos].xvel = ANIMAL_XVEL
		object[tempObjectPos].yvel = ANIMAL_YVEL

		Rand(checkResult, 32)
		if checkResult < 16
			object[tempObjectPos].direction = 1
			FlipSign(object[tempObjectPos].xvel)
		end if
	else
		object[tempObjectPos].state = ANIMAL_BOUNCING_PLAYERDIR
	end if
end function


// ========================
// Events
// ========================

event ObjectUpdate
	switch object.state
	case ANIMAL_WAIT
		if object.timer < object.delay
			object.timer++
		else
			object.xvel = ANIMAL_XVEL

			if object.randomizeDir == true
				object.drawOrder = 4

				Rand(checkResult, 32)
				if checkResult < 16
					object.direction = 1
					FlipSign(object.xvel)
				end if
			else
				object.direction = 1
				FlipSign(object.xvel)
			end if

			object.yvel = -0x40000
			object.state++
		end if
		break

	case ANIMAL_FALL
		object.ypos += object.yvel
		object.yvel += 0x3800

		if object.yvel > 0
			ObjectTileCollision(0, 0, 8, 0)
			if checkResult == true
				object.yvel = ANIMAL_YVEL
				object.state++
			end if
		end if
		break

	case ANIMAL_BOUNCING_PLAYERDIR
		if object[0].xpos < object.xpos
			object.direction = 1
		else
			object.direction = 0
		end if
 	// Fall through
	case ANIMAL_BOUNCING_NOBOUNDS
	case ANIMAL_BOUNCING_SWAPDIR
	case ANIMAL_BOUNCING
		object.xpos += object.xvel
		object.ypos += object.yvel
		object.yvel += 0x3800

		if object.yvel > 0
			ObjectTileCollision(0, 0, 8, 0)
			if checkResult == true
				if object.state == ANIMAL_BOUNCING_SWAPDIR
					if object.bounceDir == 1
						FlipSign(object.xvel)
						object.direction ^= 1
					end if
					object.bounceDir ^= 1
				end if
				
				object.yvel = ANIMAL_YVEL
			end if
		end if
		break
	end switch
	
	if object.state < ANIMAL_BOUNCING_SWAPDIR
		if object.outOfBounds == true
			object.type = TypeName[Blank Object]
		end if
	end if
end event


event ObjectDraw
	switch object.state
	case ANIMAL_WAIT
	case ANIMAL_FALL
		DrawSprite(2)
		break

	case ANIMAL_BOUNCING_NOBOUNDS
	case ANIMAL_BOUNCING_SWAPDIR
	case ANIMAL_BOUNCING_PLAYERDIR
	case ANIMAL_BOUNCING
		if object.yvel < 0
			DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
		else
			DrawSpriteFX(1, FX_FLIP, object.xpos, object.ypos)
		end if
		break
	end switch
end event


event ObjectStartup
	LoadSpriteSheet("Global/Items2.gif")
	SpriteFrame(-12, -8, 24, 15, 1, 232)
	SpriteFrame(-12, -8, 24, 15, 1, 216)
	SpriteFrame(-7, -12, 16, 24, 66, 231)

	foreach (TypeName[Picky], arrayPos0, ALL_ENTITIES)
		if object[arrayPos0].propertyValue == 1
			object[arrayPos0].state = ANIMAL_BOUNCING_SWAPDIR
			object[arrayPos0].xvel = ANIMAL_XVEL
			object[arrayPos0].yvel = ANIMAL_YVEL

			Rand(checkResult, 32)
			if checkResult < 16
				object[arrayPos0].direction = 1
				FlipSign(object[arrayPos0].xvel)
			end if
		else
			if object[arrayPos0].propertyValue == 2
				object[arrayPos0].state = ANIMAL_BOUNCING_PLAYERDIR
			end if

			if object[arrayPos0].propertyValue == 3
				object[arrayPos0].state = ANIMAL_BOUNCING
				object[arrayPos0].xvel = ANIMAL_XVEL
				FlipSign(object[arrayPos0].xvel)
				object[arrayPos0].direction = 1
			end if
		end if

		object[arrayPos0].propertyValue = 0
	next

	SetTableValue(TypeName[Picky], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(Picky_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(Picky_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++
end event


// ========================
// Editor Events
// ========================

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
		case 0 // behaviour
			checkResult = object.propertyValue
			break
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
		case 0 // behaviour
			object.propertyValue = editor.variableValue
			break
		end switch
	end if
end event


event RSDKDraw
	DrawSprite(2)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Items2.gif")
	SpriteFrame(-12, -8, 24, 15, 1, 232)
	SpriteFrame(-12, -8, 24, 15, 1, 216)
	SpriteFrame(-7, -12, 16, 24, 66, 231)

	AddEditorVariable("behaviour")
	SetActiveVariable("behaviour")
	AddEnumVariable("Bounce Around (No Bounds)", 0)
	AddEnumVariable("Swap direction each bounce", 1)
	AddEnumVariable("Follow Player", 2)
	AddEnumVariable("Bounce Around (Bounds)", 3)
end event
