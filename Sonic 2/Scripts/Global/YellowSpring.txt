// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Yellow Spring Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.value1 : object.active
private alias object.value2 : object.stoodPlayers
private alias object.value3 : object.timer
private alias object.value7 : object.enabledInAir

// Only used on type 4 (bottom)
private alias object.value0 : object.overrideVelocity.x
private alias object.value1 : object.overrideVelocity.y

// Player aliases
private alias object.value1  : player.timer
private alias object.value10 : player.animationReserve		// Used by springs to store what animation will play after the bounce animation
private alias object.value17 : debugMode.currentSelection
private alias object.value25 : player.gravityStrength

// ========================
// Function Declarations
// ========================
reserve function YellowSpring_DebugDraw
reserve function YellowSpring_DebugSpawn

// ========================
// Static Values
// ========================
private value YellowSpring_startDebugID = 0

// ========================
// Tables
// ========================
private table YellowSpring_directionTable
	FLIP_NONE, FLIP_NONE, FLIP_NONE, FLIP_NONE, FLIP_NONE, FLIP_NONE, FLIP_Y, FLIP_Y, FLIP_NONE, FLIP_NONE, FLIP_X, FLIP_Y, FLIP_NONE, FLIP_X, FLIP_Y, FLIP_XY
	FLIP_NONE, FLIP_NONE, FLIP_X, FLIP_Y, FLIP_NONE, FLIP_X, FLIP_Y, FLIP_XY
end table

private table YellowSpring_heightsTable
	16, 16, 16, 16, 16, 16, 14, 12, 10, 8, 6, 4, 2, 0, -2, -4
end table

private table YellowSpring_collisionTypes
	C_BOX, C_BOX, C_BOX, C_BOX, C_BOX, C_BOX, C_PLATFORM, C_PLATFORM, C_PLATFORM, C_PLATFORM, C_PLATFORM, C_PLATFORM, C_PLATFORM, C_PLATFORM, C_BOX, C_BOX
end table


function YellowSpring_DebugDraw
	temp1 = object.direction
	temp0 = debugMode[0].currentSelection
	temp0 -= YellowSpring_startDebugID
	GetTableValue(object.direction, temp0, YellowSpring_directionTable)
	DrawSpriteFX(temp0, FX_FLIP, object.xpos, object.ypos)
	object.direction = temp1
end function


function YellowSpring_DebugSpawn
	temp0 = debugMode[0].currentSelection
	temp0 -= YellowSpring_startDebugID
	CreateTempObject(TypeName[Yellow Spring], temp0, object.xpos, object.ypos)
end function


event ObjectMain
	temp1 = object.propertyValue
	temp1 &= 0x7F
	temp2 = 0

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		switch temp1
		case 0
			temp0 = object.active
			if object[currentPlayer].gravity == GRAVITY_AIR
				temp0 = true
			end if

			if object[currentPlayer].collisionMode > CMODE_FLOOR
				if object[currentPlayer].yvel < 0
					temp0 = true
				end if
			end if
			
			if temp0 == false
				BoxCollisionTest(C_BOX, object.entityPos, -14, -8, 14, 8, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				if object[currentPlayer].gravity == GRAVITY_AIR
					BoxCollisionTest(C_TOUCH, object.entityPos, -14, -10, 14, -6, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				else
					BoxCollisionTest(C_TOUCH, object.entityPos, -14, -12, 14, -6, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				end if

				if checkResult == true
					player[currentPlayer].animationReserve = ANI_WALKING
					if object[currentPlayer].animation == ANI_RUNNING
						player[currentPlayer].animationReserve = ANI_RUNNING
					end if

					if object[currentPlayer].animation == ANI_PEELOUT
						player[currentPlayer].animationReserve = ANI_PEELOUT
					end if

					object.timer = 1
					object[currentPlayer].state = PlayerObject_HandleAir
					object[currentPlayer].tileCollisions = true
					object[currentPlayer].gravity = GRAVITY_AIR
					object[currentPlayer].speed = object[currentPlayer].xvel
					object[currentPlayer].yvel = -0xA0000

					if object.propertyValue >= 0x80
						object[currentPlayer].animation = ANI_TWIRL
						object[currentPlayer].prevAnimation = ANI_TWIRL
						object[currentPlayer].frame = 0
						object[currentPlayer].animationSpeed = 40
					else
						object[currentPlayer].animation = ANI_BOUNCING
					end if
					player[currentPlayer].timer = 0

					PlaySfx(SfxName[Spring], false)
				end if
			else
				if object[currentPlayer].yvel >= 0
					BoxCollisionTest(C_PLATFORM, object.entityPos, -14, -8, 14, 8, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)

					BoxCollisionTest(C_TOUCH, object.entityPos, -14, -10, 14, -6, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
					if checkResult == true
						player[currentPlayer].animationReserve = ANI_WALKING
						if object[currentPlayer].animation == ANI_RUNNING
							player[currentPlayer].animationReserve = ANI_RUNNING
						end if

						if object[currentPlayer].animation == ANI_PEELOUT
							player[currentPlayer].animationReserve = ANI_PEELOUT
						end if

						object.timer = 1
						object[currentPlayer].state = PlayerObject_HandleAir
						object[currentPlayer].tileCollisions = true
						object[currentPlayer].gravity = GRAVITY_AIR
						object[currentPlayer].speed = object[currentPlayer].xvel
						object[currentPlayer].yvel = -0xA0000
						object[currentPlayer].yvel -= player[currentPlayer].gravityStrength

						if object.propertyValue >= 0x80
							object[currentPlayer].animation = ANI_TWIRL
							object[currentPlayer].prevAnimation = ANI_TWIRL
							object[currentPlayer].frame = 0
							object[currentPlayer].animationSpeed = 40
						else
							object[currentPlayer].animation = ANI_BOUNCING
						end if
						player[currentPlayer].timer = 0

						PlaySfx(SfxName[Spring], false)
					end if
				end if
			end if
			break

		case 1
			BoxCollisionTest(C_BOX, object.entityPos, -8, -14, 8, 14, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			if object[currentPlayer].gravity == GRAVITY_GROUND
				BoxCollisionTest(C_TOUCH, object.entityPos, 6, -14, 10, 14, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				if checkResult == true
					object.timer = 1
					object[currentPlayer].tileCollisions = true
					object[currentPlayer].speed = 0xA0000
					object[currentPlayer].collisionMode = CMODE_FLOOR
					object[currentPlayer].pushing = 0
					object[currentPlayer].direction = FLIP_NONE
					object[currentPlayer].controlLock = 15
					PlaySfx(SfxName[Spring], false)

					if object[currentPlayer].state != PlayerObject_HandleRolling
						object[currentPlayer].state = PlayerObject_HandleGround
						object[currentPlayer].animation = ANI_RUNNING
					end if
				end if
			else
				if object.enabledInAir == true
					BoxCollisionTest(C_TOUCH, object.entityPos, 6, -4, 11, 4, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
					if checkResult == true
						object.timer = 1
						object[currentPlayer].tileCollisions = true
						object[currentPlayer].speed = 0xA0000
						object[currentPlayer].yvel = 0
						object[currentPlayer].collisionMode = CMODE_FLOOR
						object[currentPlayer].pushing = false
						object[currentPlayer].direction = FLIP_NONE
						object[currentPlayer].controlLock = 15

						PlaySfx(SfxName[Spring], false)

						if object[currentPlayer].state != PlayerObject_RollingJump
							object[currentPlayer].animation = ANI_BOUNCING
							if object[currentPlayer].animation != ANI_JUMPING
								object[currentPlayer].animation = ANI_RUNNING
							end if
							object.animationSpeed = object.speed
							object[currentPlayer].animationSpeed *= 80
							object[currentPlayer].animationSpeed /= 0x60000
						end if
					end if
				end if
			end if
			break

		case 2
			BoxCollisionTest(C_BOX, object.entityPos, -8, -14, 8, 14, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			if object[currentPlayer].gravity == GRAVITY_GROUND
				BoxCollisionTest(C_TOUCH, object.entityPos, -10, -14, -6, 14, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				if checkResult == true
					object.timer = 1
					object[currentPlayer].tileCollisions = true
					object[currentPlayer].speed = -0xA0000
					object[currentPlayer].collisionMode = CMODE_FLOOR
					object[currentPlayer].pushing = false
					object[currentPlayer].direction = FLIP_X
					object[currentPlayer].controlLock = 15

					PlaySfx(SfxName[Spring], false)

					if object[currentPlayer].state != PlayerObject_HandleRolling
						object[currentPlayer].state = PlayerObject_HandleGround
						object[currentPlayer].animation = ANI_RUNNING
					end if
				end if
			else
				if object.enabledInAir == true
					BoxCollisionTest(C_TOUCH, object.entityPos, -10, -14, -6, 14, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
					if checkResult == true
						object.timer = 1
						object[currentPlayer].tileCollisions = true
						object[currentPlayer].speed = -0xA0000
						object[currentPlayer].yvel = 0
						object[currentPlayer].collisionMode = CMODE_FLOOR
						object[currentPlayer].pushing = false
						object[currentPlayer].direction = FLIP_X
						object[currentPlayer].controlLock = 15

						PlaySfx(SfxName[Spring], false)

						if object[currentPlayer].state != PlayerObject_RollingJump
							object[currentPlayer].animation = PlayerObject_HandleAir
							if object[currentPlayer].animation != ANI_JUMPING
								object[currentPlayer].animation = ANI_RUNNING
							end if

							object.animationSpeed = object.speed
							FlipSign(object[currentPlayer].animationSpeed)
							object[currentPlayer].animationSpeed *= 80
							object[currentPlayer].animationSpeed /= 0x60000
						end if
					end if
				end if
			end if
			break

		case 3
			BoxCollisionTest(C_BOX, object.entityPos, -14, -8, 14, 8, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			BoxCollisionTest(C_TOUCH, object.entityPos, -14, 6, 14, 10, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			if checkResult == true
				object.timer = 1
				if object[currentPlayer].collisionMode == CMODE_ROOF
					FlipSign(object[currentPlayer].speed)
					FlipSign(object[currentPlayer].xvel)
				end if

				object[currentPlayer].state = PlayerObject_HandleAir
				object[currentPlayer].tileCollisions = true
				object[currentPlayer].gravity = GRAVITY_AIR
				object[currentPlayer].speed = object[currentPlayer].xvel
				object[currentPlayer].yvel = 0xA0000
				player[currentPlayer].timer = 0

				PlaySfx(SfxName[Spring], false)
			end if
			break

		case 4
			temp0 = object[currentPlayer].xpos
			temp0 -= object.xpos
			temp0 += 0x100000
			temp0 >>= 17
			if temp0 < 0
				temp0 = 0
			end if

			if temp0 > 15
				temp0 = 15
			end if

			GetTableValue(temp1, temp0, YellowSpring_heightsTable)
			FlipSign(temp1)

			GetTableValue(temp4, temp0, YellowSpring_collisionTypes)
			BoxCollisionTest(temp4, object.entityPos, -16, temp1, 16, 24, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			if checkResult != COL_TOP
				GetBit(temp3, object.stoodPlayers, temp2)
				if temp3 == true
					temp3 = object[currentPlayer].xpos
					temp3 -= object.xpos
					temp3 >>= 16
					Abs(temp3)
					if temp3 < 16
						if object[currentPlayer].yvel >= 0
							object[currentPlayer].iypos = object[currentPlayer].collisionBottom
							FlipSign(object[currentPlayer].ypos)
							temp1 <<= 16
							object[currentPlayer].ypos += temp1
							object[currentPlayer].ypos += object.ypos
							checkResult = true
						end if
					end if
				end if
			end if

			if checkResult == true
				if temp0 >= 6
					player[currentPlayer].animationReserve = ANI_WALKING
					if object[currentPlayer].animation == ANI_RUNNING
						player[currentPlayer].animationReserve = ANI_RUNNING
					end if

					if object[currentPlayer].animation == ANI_PEELOUT
						player[currentPlayer].animationReserve = ANI_PEELOUT
					end if

					object.timer = 1
					if object[currentPlayer].collisionMode == CMODE_ROOF
						FlipSign(object[currentPlayer].speed)
						FlipSign(object[currentPlayer].xvel)
					end if

					object[currentPlayer].state = PlayerObject_HandleAir
					object[currentPlayer].tileCollisions = true
					object[currentPlayer].gravity = GRAVITY_AIR

					if object.overrideVelocity.x == 0
						object[currentPlayer].xvel = 0xA0000
						object[currentPlayer].yvel = -0xA0000
					else
						object[currentPlayer].xvel = object.overrideVelocity.x
						object[currentPlayer].xvel <<= 16
						object[currentPlayer].yvel = object.overrideVelocity.y
						object[currentPlayer].yvel *= -0x10000
					end if

					object[currentPlayer].speed = object[currentPlayer].xvel
					object[currentPlayer].yvel -= player[currentPlayer].gravityStrength
					player[currentPlayer].timer = 0
					object[currentPlayer].direction = FLIP_NONE

					if object.propertyValue >= 0x80
						object[currentPlayer].animation = ANI_TWIRL
					else
						object[currentPlayer].animation = ANI_BOUNCING
					end if
					PlaySfx(SfxName[Spring], false)

					SetBit(object.stoodPlayers, temp2, false)
				else
					SetBit(object.stoodPlayers, temp2, true)
				end if
			else
				SetBit(object.stoodPlayers, temp2, false)
			end if
			break

		case 5
			temp0 = object[currentPlayer].xpos
			temp0 -= object.xpos
			temp0 += 0x100000
			temp0 >>= 17
			if temp0 < 0
				temp0 = 0
			end if

			if temp0 > 15
				temp0 = 15
			end if
			temp0 -= 15

			Abs(temp0)
			GetTableValue(temp1, temp0, YellowSpring_heightsTable)
			FlipSign(temp1)

			GetTableValue(temp4, temp0, YellowSpring_collisionTypes)
			BoxCollisionTest(temp4, object.entityPos, -16, temp1, 16, 32, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			if checkResult != COL_TOP
				GetBit(temp3, object.stoodPlayers, temp2)
				if temp3 == true
					temp3 = object[currentPlayer].xpos
					temp3 -= object.xpos
					temp3 >>= 16
					Abs(temp3)
					if temp3 < 16
						if object[currentPlayer].yvel >= 0
							object[currentPlayer].iypos = object[currentPlayer].collisionBottom
							FlipSign(object[currentPlayer].ypos)
							temp1 <<= 16
							object[currentPlayer].ypos += temp1
							object[currentPlayer].ypos += object.ypos
							checkResult = true
						end if
					end if
				end if
			end if

			if checkResult == true
				if temp0 >= 6
					player[currentPlayer].animationReserve = ANI_WALKING
					if object[currentPlayer].animation == ANI_RUNNING
						player[currentPlayer].animationReserve = ANI_RUNNING
					end if

					if object[currentPlayer].animation == ANI_PEELOUT
						player[currentPlayer].animationReserve = ANI_PEELOUT
					end if

					object.timer = 1
					if object[currentPlayer].collisionMode == CMODE_ROOF
						FlipSign(object[currentPlayer].speed)
						FlipSign(object[currentPlayer].xvel)
					end if

					object[currentPlayer].state = PlayerObject_HandleAir
					object[currentPlayer].tileCollisions = true
					object[currentPlayer].gravity = GRAVITY_AIR
					object[currentPlayer].xvel = -0xA0000
					object[currentPlayer].speed = object[currentPlayer].xvel
					object[currentPlayer].yvel = -0xA0000
					object[currentPlayer].yvel -= player[currentPlayer].gravityStrength
					player[currentPlayer].timer = 0
					object[currentPlayer].direction = FLIP_X

					if object.propertyValue >= 0x80
						object[currentPlayer].animation = ANI_TWIRL
					else
						object[currentPlayer].animation = ANI_BOUNCING
					end if
					PlaySfx(SfxName[Spring], false)

					SetBit(object.stoodPlayers, temp2, false)
				else
					SetBit(object.stoodPlayers, temp2, true)
				end if
			else
				SetBit(object.stoodPlayers, temp2, false)
			end if
			break

		case 6
			temp0 = object[currentPlayer].xpos
			temp0 -= object.xpos
			temp0 += 0x100000
			temp0 >>= 17
			if temp0 < 0
				temp0 = 0
			end if

			if temp0 > 15
				temp0 = 15
			end if

			GetTableValue(temp1, temp0, YellowSpring_heightsTable)
			BoxCollisionTest(C_BOX, object.entityPos, -16, -16, 32, temp1, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			if checkResult != COL_BOTTOM
				GetBit(temp3, object.stoodPlayers, temp2)
				if temp3 == true
					temp3 = object[currentPlayer].xpos
					temp3 -= object.xpos
					temp3 >>= 16
					Abs(temp3)
					if temp3 < 16
						if object[currentPlayer].yvel <= 0
							object[currentPlayer].iypos = object[currentPlayer].collisionTop
							FlipSign(object[currentPlayer].ypos)
							temp1 <<= 16
							object[currentPlayer].ypos += temp1
							object[currentPlayer].ypos += object.ypos
							checkResult = true
						end if
					end if
				end if
			end if

			if checkResult == COL_BOTTOM
				if temp0 >= 6
					object.timer = 1
					if object[currentPlayer].collisionMode == CMODE_ROOF
						FlipSign(object[currentPlayer].speed)
						FlipSign(object[currentPlayer].xvel)
					end if

					object[currentPlayer].state = PlayerObject_HandleAir
					object[currentPlayer].tileCollisions = true
					object[currentPlayer].gravity = GRAVITY_AIR
					object[currentPlayer].xvel = 0xA0000
					object[currentPlayer].speed = object[currentPlayer].xvel
					object[currentPlayer].yvel = 0xA0000
					player[currentPlayer].timer = 0
					object[currentPlayer].direction = FLIP_NONE
					PlaySfx(SfxName[Spring], false)
					
					SetBit(object.stoodPlayers, temp2, false)
				else
					SetBit(object.stoodPlayers, temp2, true)
				end if
			else
				SetBit(object.stoodPlayers, temp2, false)
			end if
			break

		case 7
			temp0 = object[currentPlayer].xpos
			temp0 -= object.xpos
			temp0 += 0x100000
			temp0 >>= 17
			if temp0 < 0
				temp0 = 0
			end if
			
			if temp0 > 15
				temp0 = 15
			end if

			temp0 -= 15
			Abs(temp0)
			GetTableValue(temp1, temp0, YellowSpring_heightsTable)
			BoxCollisionTest(C_BOX, object.entityPos, -16, -16, 16, temp1, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
			if checkResult != COL_BOTTOM
				GetBit(temp3, object.stoodPlayers, temp2)
				if temp3 == true
					temp3 = object[currentPlayer].xpos
					temp3 -= object.xpos
					temp3 >>= 16
					Abs(temp3)
					if temp3 < 16
						if object[currentPlayer].yvel <= 0
							object[currentPlayer].iypos = object[currentPlayer].collisionTop
							FlipSign(object[currentPlayer].ypos)
							temp1 <<= 16
							object[currentPlayer].ypos += temp1
							object[currentPlayer].ypos += object.ypos
							checkResult = true
						end if
					end if
				end if
			end if

			if checkResult == COL_BOTTOM
				if temp0 >= 6
					object.timer = 1
					if object[currentPlayer].collisionMode == CMODE_ROOF
						FlipSign(object[currentPlayer].speed)
						FlipSign(object[currentPlayer].xvel)
					end if

					object[currentPlayer].state = PlayerObject_HandleAir
					object[currentPlayer].tileCollisions = true
					object[currentPlayer].gravity = GRAVITY_AIR
					object[currentPlayer].xvel = -0xA0000
					object[currentPlayer].speed = object[currentPlayer].xvel
					object[currentPlayer].yvel = 0xA0000
					player[currentPlayer].timer = 0
					object[currentPlayer].direction = FLIP_X
					PlaySfx(SfxName[Spring], false)

					SetBit(object.stoodPlayers, temp2, false)
				else
					SetBit(object.stoodPlayers, temp2, true)
				end if
			else
				SetBit(object.stoodPlayers, temp2, false)
			end if
			break
		end switch
		temp2++
	next

	object.frame = object.propertyValue
	object.frame &= 0x7F

	if object.timer != 0
		switch object.timer
		case 2
		case 3
			break

		case 1
			object.frame += 8
			break

		case 4
		case 5
		case 6
		case 7
		case 8
		case 9
			object.frame += 16
			break
		end switch

		object.timer++
		if object.timer >= 10
			object.timer = 0
		end if
	end if
end event


event ObjectDraw
	GetTableValue(object.direction, object.frame, YellowSpring_directionTable)
	DrawSpriteFX(object.frame, FX_FLIP, object.xpos, object.ypos)
end event


event ObjectStartup
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, -8, 32, 16, 52, 17)
	SpriteFrame(-8, -16, 16, 32, 101, 1)
	SpriteFrame(-8, -16, 16, 32, 134, 67)
	SpriteFrame(-16, -8, 32, 16, 157, 132)
	SpriteFrame(-16, -16, 32, 32, 118, 34)
	SpriteFrame(-16, -16, 32, 32, 157, 83)
	SpriteFrame(-16, -16, 32, 32, 118, 34)
	SpriteFrame(-16, -16, 32, 32, 157, 83)
	SpriteFrame(-16, 0, 32, 8, 52, 17)
	SpriteFrame(-8, -16, 8, 32, 109, 1)
	SpriteFrame(0, -16, 8, 32, 134, 67)
	SpriteFrame(-16, -8, 32, 8, 157, 140)
	SpriteFrame(-17, -10, 27, 27, 80, 186)
	SpriteFrame(-17, -10, 27, 27, 80, 186)
	SpriteFrame(-17, -10, 27, 27, 80, 186)
	SpriteFrame(-17, -10, 27, 27, 80, 186)
	SpriteFrame(-16, -24, 32, 32, 52, 67)
	SpriteFrame(-8, -16, 32, 32, 85, 67)
	SpriteFrame(-8, -16, 32, 32, 85, 67)
	SpriteFrame(-16, -24, 32, 32, 52, 67)
	SpriteFrame(-16, -26, 43, 42, 96, 100)
	SpriteFrame(-16, -26, 43, 42, 96, 100)
	SpriteFrame(-16, -26, 43, 42, 96, 100)
	SpriteFrame(-16, -26, 43, 42, 96, 100)

	temp0 = 0
	YellowSpring_startDebugID = DebugMode_ObjCount
	while temp0 < 8
		SetTableValue(TypeName[Yellow Spring], DebugMode_ObjCount, DebugMode_TypesTable)
		SetTableValue(YellowSpring_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
		SetTableValue(YellowSpring_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
		DebugMode_ObjCount++
		temp0++
	loop
end event

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
		case 0 // flipFlags
			checkResult = object.propertyValue
			checkResult &= 0x7
			break
		case 1 // useTwirlAnim
			checkResult = object.propertyValue
			checkResult >>= 7
			checkResult &= 1
			break
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
		case 0 // flipFlags
			temp0 = editor.variableValue
			temp0 &= 0x7

			temp1 = 7
			Not(temp1)

			object.propertyValue &= temp1
			object.propertyValue |= temp0
			break
		case 1 // useTwirlAnim
			temp0 = editor.variableValue
			temp0 &= 1
			temp0 <<= 7

			object.propertyValue &= 0x7
			object.propertyValue |= temp0
			break
		end switch
	end if
end event

event RSDKDraw
	object.frame = object.propertyValue
	object.frame &= 7

	GetTableValue(object.direction, object.frame, YellowSpring_directionTable)
	DrawSpriteFX(object.frame, FX_FLIP, object.xpos, object.ypos)
end event

event RSDKLoad
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, -8, 32, 16, 52, 17)
	SpriteFrame(-8, -16, 16, 32, 101, 1)
	SpriteFrame(-8, -16, 16, 32, 134, 67)
	SpriteFrame(-16, -8, 32, 16, 157, 132)
	SpriteFrame(-16, -16, 32, 32, 118, 34)
	SpriteFrame(-16, -16, 32, 32, 157, 83)
	SpriteFrame(-16, -16, 32, 32, 118, 34)
	SpriteFrame(-16, -16, 32, 32, 157, 83)
	SpriteFrame(-16, 0, 32, 8, 52, 17)
	SpriteFrame(-8, -16, 8, 32, 109, 1)
	SpriteFrame(0, -16, 8, 32, 134, 67)
	SpriteFrame(-16, -8, 32, 8, 157, 140)
	SpriteFrame(-17, -10, 27, 27, 80, 186)
	SpriteFrame(-17, -10, 27, 27, 80, 186)
	SpriteFrame(-17, -10, 27, 27, 80, 186)
	SpriteFrame(-17, -10, 27, 27, 80, 186)
	SpriteFrame(-16, -24, 32, 32, 52, 67)
	SpriteFrame(-8, -16, 32, 32, 85, 67)
	SpriteFrame(-8, -16, 32, 32, 85, 67)
	SpriteFrame(-16, -24, 32, 32, 52, 67)
	SpriteFrame(-16, -26, 43, 42, 96, 100)
	SpriteFrame(-16, -26, 43, 42, 96, 100)
	SpriteFrame(-16, -26, 43, 42, 96, 100)
	SpriteFrame(-16, -26, 43, 42, 96, 100)

	AddEditorVariable("flipFlags")
	SetActiveVariable("flipFlags")
	AddEnumVariable("Up", 0)
	AddEnumVariable("Right", 1)
	AddEnumVariable("Left", 2)
	AddEnumVariable("Down", 3)
	AddEnumVariable("Up Right", 4)
	AddEnumVariable("Up Left", 5)
	AddEnumVariable("Down Right", 6)
	AddEnumVariable("Down Left", 7)

	AddEditorVariable("useTwirlAnim")
	SetActiveVariable("useTwirlAnim")
	AddEnumVariable("false", false)
	AddEnumVariable("true", true)
	
	// only used on type 4 (down) springs
	SetVariableAlias(ALIAS_VAR_VAL0, "overrideVelocity.x")
	SetVariableAlias(ALIAS_VAR_VAL1, "overrideVelocity.y")
	SetVariableAlias(ALIAS_VAR_VAL2, "unused")
	SetVariableAlias(ALIAS_VAR_VAL3, "unused")
end event
