// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: CPZ Setup Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.value0  : object.aniTileTimer
// value1 is unused
private alias object.value2 : object.scrollPos

// Jump in values here for some reason...
// TODO: actually it seems like the values got mixed up when aliasing, these _should_ be used

// Values used for updating the underwater Super Palette
private alias object.value6  : object.clrDivisor_R
private alias object.value7  : object.clrDivisor_G
private alias object.value8  : object.clrDivisor_B
private alias object.value9  : object.waterClrDivisor_R
private alias object.value10 : object.waterClrDivisor_G
private alias object.value11 : object.waterClrDivisor_B

private alias object.value12 : object.drawingIndex
private alias object.value13 : object.rippleTimer
private alias object.value14 : object.paletteTimer
private alias object.value15 : object.bgTowerLightPalIndex
private alias object.value16 : object.rainbowLightPalIndex
private alias object.value17 : object.chemLiquidPalIndex1
private alias object.value18 : object.chemLiquidPalIndex2
private alias object.value19 : object.chemLiquidPalIndex3

// Tracks
private alias 0 : TRACK_STAGE
private alias 1 : TRACK_ACTFINISH
private alias 2 : TRACK_INVINCIBLE
private alias 3 : TRACK_CONTINUE
private alias 4 : TRACK_BOSS
private alias 5 : TRACK_GAMEOVER
private alias 6 : TRACK_DROWNING
private alias 7 : TRACK_SUPER

// Reserved object slots
private alias 10 : SLOT_ZONESETUP
private alias 25 : SLOT_MUSICEVENT_CHANGE
private alias 26 : SLOT_MUSICEVENT_BOSS

// Music Events
private alias  0 : MUSICEVENT_FADETOBOSS
private alias  1 : MUSICEVENT_FADETOSTAGE
private alias  2 : MUSICEVENT_TRANSITION

private alias 0 : MUSICEVENT_FLAG_NOCHANGE
private alias 1 : MUSICEVENT_FLAG_SPEEDUP
private alias 2 : MUSICEVENT_FLAG_SLOWDOWN

// ========================
// Function Declarations
// ========================
reserve function CPZSetup_getClrDivisor
reserve function CPZSetup_InitSuperSonicPal
reserve function CPZSetup_InitSuperTailsPal
reserve function CPZSetup_InitSuperKnuxPal
reserve function CPZSetup_SpeedUpMusic
reserve function CPZSetup_SlowDownMusic

// ========================
// Static Values
// ========================
public value ZoneSetup_value33 = 0
public value ZoneSetup_value34 = 0
public value ZoneSetup_value36 = false

private value CPZSetup_hasAchievement 		= false

// Values are declared under old names then aliased under proper ones, this unfortunately has to be this way for mod compatability reasons

private alias ZoneSetup_value33 : CPZSetup_rotatingStairTimer
private alias ZoneSetup_value34 : Water_flashTimer // Uses "Water_" since all water objects use it from the setup so its easier to make new objs this way
private alias ZoneSetup_value36 : CPZSetup_enteredWater

// ========================
// Tables
// ========================
private table CPZSetup_bgTowerLightPalTable
	0xE00000, 0xC00000, 0xA00000, 0x800000, 0x600000, 0x400000, 0x200000, 0x400000, 0x600000, 0x800000, 0xA00000, 0xC00000, 0xE00000, 0xE02000, 0xE04000, 0xE02000
end table

private table CPZSetup_rainbowLightPalTable
	0x00E000, 0x20C000, 0x40A000, 0x608000, 0x806000, 0xA04000, 0xC02000, 0xE00000, 0xC00020, 0xA00040, 0x800060, 0x600080, 0x4000A0, 0x2000C0, 0x0000E0, 0x0020C0
	0x0040A0, 0x006080, 0x008060, 0x00A040, 0x00C020
end table

private table CPZSetup_chemLiquidPalTable
	0x0040E0, 0x0000C0, 0x0000C0, 0x0060E0, 0x0020C0, 0x0000C0, 0x0040E0, 0x0040E0, 0x0000C0, 0x0020C0, 0x0060E0, 0x0020C0, 0x0000C0, 0x0040E0, 0x0040C0, 0x0000C0
	0x0020C0, 0x0040E0, 0x0000C0, 0x0000C0, 0x0060E0, 0x0020C0, 0x0000C0, 0x0040E0, 0x0020E0, 0x0000C0, 0x0020C0
end table

private table CPZSetup_deformationTable
	1, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 1, 2, 0, 0
	2, 0, 3, 2, 2, 3, 2, 2, 1, 3, 0, 0, 1, 0, 1, 3
	1, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 1, 2, 0, 0
	2, 0, 3, 2, 2, 3, 2, 2, 1, 3, 0, 0, 1, 0, 1, 3
end table

// Unused palette table, also found in DEZSetup and EndSetup and even Mania's CPZ!
// These are actually colours for one of WFZ's palette cycles
// However, you won't find this in WFZSetup because in this 2013 remake, WFZ only uses 1 of the 3 palette cycles it had in the original game,
// this one being among the 2 that were cut
// Why they were cut, I have no idea, but at the very least, it's certainly a mystery how one of them ended up here of all places...
private table CPZSetup_unusedPalette
	0x00E000, 0x00A000, 0x006000, 0x002000, 0x000000, 0x000020, 0x000060, 0x0020A0, 0x0060E0, 0x0020A0, 0x000060, 0x000020, 0x000000, 0x200000, 0x600000, 0xA00000
	0xE00000, 0xE04000, 0xE00000, 0xA00000, 0x600000, 0x200000, 0x000000, 0x202000, 0x606000, 0xA0A000, 0xE0E000, 0xA0A000, 0x606000, 0x202000, 0x000000, 0x002000
	0x006000, 0x00A000
end table

private table CPZSetup_replay_attract_S
	0x380000, 0x1EC0000
	0b00000000, 10
	0b00001000, 52
	0b00111000, 1
	0b00101000, 5
	0b00001000, 35
	0b00111000, 1
	0b00101000, 8
	0b00001000, 255
	0b00001000, 214
	0b00000000, 9
	0b00000100, 3
	0b00110100, 1
	0b00100100, 9
	0b00101000, 2
	0b00001000, 54
	0b00000000, 2
	0b00000100, 2
	0b00000000, 1
	0b00001000, 192
	0b00111000, 1
	0b00101000, 41
	0b00001000, 13
	0b00001010, 1
	0b00000010, 26
	0b00001010, 2
	0b00001000, 16
	0b00000000, 2
	0b00000100, 22
	0b00000000, 8
	0b00001000, 34
	0b00111000, 1
	0b00101000, 3
	0b00001000, 32
	0b00000000, 1
	0b00000100, 10
	0b00000000, 1
	0b00001000, 10
	0b00000000, 16
	0b00000100, 39
	0b00000000, 1
	0b00000010, 20
	0b00000000, 1
	0b00000100, 29
	0b00000000, 37
	0b00000100, 12
	0b00000000, 4
	0b00000100, 4
	0b00000000, 24
	0b00110000, 1
	0b00100000, 4
	0b00000100, 7
	0b00000000, 20
	0b00000100, 30
	0b00000000 // (?)
end table

// About that above table, there's supposed to be an even amount of entries but I guess it just doesn't

private table CPZSetup_replay_attract_T
	0x380000, 0x1F00000
	0b00000000, 53
	0b00001000, 45
	0b00111000, 1
	0b00101000, 6
	0b00001000, 34
	0b00111000, 1
	0b00101000, 9
	0b00001000, 55
	0b00111000, 1
	0b00101000, 21
	0b00001000, 249
	0b00111000, 1
	0b00101000, 12
	0b00001000, 84
	0b00111000, 1
	0b00101000, 21
	0b00001000, 138
	0b00111000, 1
	0b00101000, 9
	0b00101010, 16
	0b00001010, 9
	0b00001000, 96
	0b00001010, 4
	0b00000010, 9
	0b00001010, 2
	0b00001000, 71
	0b00000000, 11
	0b00000100, 44
	0b00000000, 13
	0b00000100, 4
	0b00000000, 4
	0b00000100, 10
	0b00000000, 9
	0b00000100, 9
	0b00000000, 3
	0b00000100, 39
	0b00000000, 6
	0b00000100, 11
	0b00000000, 7
	0b00000100, 5
	0b00000000, 13
	0b00110000, 1
	0b00100000, 3
	0b00101000, 1
	0b00001000, 5
	0b00111000, 1
	0b00101000, 3
	0b00100000, 2
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00111000, 1
	0b00101000, 4
	0b00001000, 4
	0b00111000, 1
	0b00100000, 5
	0b00000000, 3
	0b00110000, 1
	0b00100000, 6
	0b00000000, 3
	0b00000100, 1
	0b00110100, 1
	0b00100100, 5
	0b00000100, 3
	0b00110100, 1
	0b00100100, 1
	0b00100000, 4
	0b00000000, 4
	0b00111000, 1
	0b00101000, 4
	0b00001000, 2
	0b00000000, 3
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00111000, 1
	0b00101000, 4
	0b00001000, 4
	0b00111000, 1
	0b00101000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 5
	0b00000000, 4
	0b00110000, 1
	0b00100000, 5
	0b00000000, 3
	0b00001000, 12
	0b00000000, 11
	0b00001000, 34
	0b00111000, 1
	0b00101000, 21
	0b00001000, 3
	0b00000000, 13
	0b00001000, 119
	0b00111000, 2
end table

private table CPZSetup_replay_attract_K
	0x380000, 0x1EC0000
	0b00000000, 54
	0b00001000, 45
	0b00111000, 1
	0b00101000, 7
	0b00001000, 34
	0b00111000, 1
	0b00101000, 20
	0b00001000, 0xFF
	0b00001000, 218
	0b00111000, 1
	0b00101000, 9
	0b00001000, 61
	0b00111000, 1
	0b00101000, 9
	0b00001000, 14
	0b00000000, 1
	0b00000100, 14
	0b00000000, 6
	0b00001000, 110
	0b00000000, 10
	0b00001000, 10
	0b00000000, 24
	0b00001000, 5
	0b00000000, 7
	0b00001000, 20
	0b00111000, 1
	0b00101000, 1
	0b00100000, 3
	0b00000000, 5
	0b00000100, 39
	0b00000000, 26
	0b00001000, 57
	0b00111000, 1
	0b00101000, 16
	0b00001000, 7
	0b00111000, 1
	0b00101000, 22
	0b00101001, 2
	0b00001001, 31
	0b00001000, 21
	0b00111000, 1
	0b00101000, 11
	0b00001000, 175
	0b00001010, 1
	0b00000010, 244
	0b00110010, 1
	0b00100010, 26
	0b00101010, 1
	0b00101000, 1
	0b00001000, 4
	0b00111000, 1
	0b00101000, 24
	0b00001000, 2
	0b00000000, 25
	0b00001000, 5
	0b00111000, 1
	0b00101000, 10
	0b00001000, 32
	0b00000000, 1
	0b00000100, 23
	0b00000000, 4
	0b00001000, 20
end table

// Wacky function to take a normal color and turn it into an underwater color
function CPZSetup_getClrDivisor
	// Regular Colour
	object.clrDivisor_R = temp1
	object.clrDivisor_R >>= 16

	object.clrDivisor_G = temp1
	object.clrDivisor_G >>= 8
	object.clrDivisor_G &= 0xFF

	object.clrDivisor_B = temp1
	object.clrDivisor_B &= 0xFF

	// Underwater Colour
	object.waterClrDivisor_R = temp2
	object.waterClrDivisor_R >>= 16

	object.waterClrDivisor_G = temp2
	object.waterClrDivisor_G >>= 8
	object.waterClrDivisor_G &= 0xFF

	object.waterClrDivisor_B = temp2
	object.waterClrDivisor_B &= 0xFF

	// Minimum of 1 (you cant divide by zero)
	if object.waterClrDivisor_R == 0
		object.waterClrDivisor_R = 1
	end if

	if object.waterClrDivisor_G == 0
		object.waterClrDivisor_G = 1
	end if

	if object.waterClrDivisor_B == 0
		object.waterClrDivisor_B = 1
	end if

	object.clrDivisor_R <<= 8
	object.clrDivisor_G <<= 8
	object.clrDivisor_B <<= 8
	object.clrDivisor_R /= object.waterClrDivisor_R
	object.clrDivisor_G /= object.waterClrDivisor_G
	object.clrDivisor_B /= object.waterClrDivisor_B

	if object.clrDivisor_R == 0
		object.clrDivisor_R = 0x100
	end if

	if object.clrDivisor_G == 0
		object.clrDivisor_G = 0x100
	end if

	if object.clrDivisor_B == 0
		object.clrDivisor_B = 0x100
	end if
end function


function CPZSetup_InitSuperSonicPal
	temp0 = 0

	// First Set of colours is just the regular underwater palette
	GetPaletteEntry(1, 2, temp1)
	SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
	temp0++

	GetPaletteEntry(1, 3, temp1)
	SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
	temp0++

	GetPaletteEntry(1, 4, temp1)
	SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
	temp0++

	GetPaletteEntry(1, 5, temp1)
	SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
	temp0++

	CopyPalette(1, 0, 4, 2, 4)
	while temp0 < 64
		GetTableValue(temp1, temp0, PlayerObject_SonicSuperPal)
		SetPaletteEntry(3, 0, temp1)
		temp0++

		GetTableValue(temp1, temp0, PlayerObject_SonicSuperPal)
		SetPaletteEntry(3, 1, temp1)
		temp0++

		GetTableValue(temp1, temp0, PlayerObject_SonicSuperPal)
		SetPaletteEntry(3, 2, temp1)
		temp0++

		GetTableValue(temp1, temp0, PlayerObject_SonicSuperPal)
		SetPaletteEntry(3, 3, temp1)
		temp0 -= 3

		// Just mix the 2 palettes, we'll use the results as our new colours
		SetPaletteFade(5, 3, 4, 48, 0, 4)

		GetPaletteEntry(5, 0, temp1)
		SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
		temp0++

		GetPaletteEntry(5, 1, temp1)
		SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
		temp0++

		GetPaletteEntry(5, 2, temp1)
		SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
		temp0++

		GetPaletteEntry(5, 3, temp1)
		SetTableValue(temp1, temp0, PlayerObject_SonicSuperAltPal)
		temp0++
	loop
end function


function CPZSetup_InitSuperTailsPal
	temp0 = 0

	GetPaletteEntry(1, 13, temp1)
	SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
	temp0++

	GetPaletteEntry(1, 17, temp1)
	SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
	temp0++

	GetPaletteEntry(1, 18, temp1)
	SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
	temp0++

	GetPaletteEntry(1, 16, temp1)
	SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
	temp0++

	while temp0 < 24
		GetPaletteEntry(0, 13, temp1)
		GetPaletteEntry(1, 13, temp2)

		CallFunction(CPZSetup_getClrDivisor)

		GetTableValue(temp1, temp0, PlayerObject_TailsSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0xF8
		temp1 /= object.clrDivisor_R

		temp2 *= 0xF8
		temp2 /= object.clrDivisor_G

		temp3 *= 0xF8
		temp3 /= object.clrDivisor_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0

		if temp1 > 0xE0
			temp1 = 0xE0
		end if

		if temp2 > 0xE0
			temp2 = 0xE0
		end if

		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
		temp0++


		GetPaletteEntry(0, 17, temp1)
		GetPaletteEntry(1, 17, temp2)

		CallFunction(CPZSetup_getClrDivisor)

		GetTableValue(temp1, temp0, PlayerObject_TailsSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0x100
		temp1 /= object.clrDivisor_R

		temp2 *= 0x100
		temp2 /= object.clrDivisor_G

		temp3 *= 0x100
		temp3 /= object.clrDivisor_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0

		if temp1 > 0xE0
			temp1 = 0xE0
		end if

		if temp2 > 0xE0
			temp2 = 0xE0
		end if

		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
		temp0++


		GetPaletteEntry(0, 18, temp1)
		GetPaletteEntry(1, 18, temp2)

		CallFunction(CPZSetup_getClrDivisor)

		GetTableValue(temp1, temp0, PlayerObject_TailsSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0x100
		temp1 /= object.clrDivisor_R

		temp2 *= 0x100
		temp2 /= object.clrDivisor_G

		temp3 *= 0x100
		temp3 /= object.clrDivisor_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0

		if temp1 > 0xE0
			temp1 = 0xE0
		end if

		if temp2 > 0xE0
			temp2 = 0xE0
		end if

		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
		temp0++


		GetPaletteEntry(0, 16, temp1)
		GetPaletteEntry(1, 16, temp2)

		CallFunction(CPZSetup_getClrDivisor)

		GetTableValue(temp1, temp0, PlayerObject_TailsSuperPal)

		temp2 = temp1
		temp2 >>= 8
		temp2 &= 0xFF

		temp3 = temp1
		temp3 &= 0xFF

		temp1 >>= 16

		temp1 *= 0x100
		temp1 /= object.clrDivisor_R

		temp2 *= 0x100
		temp2 /= object.clrDivisor_G

		temp3 *= 0x100
		temp3 /= object.clrDivisor_B

		temp1 &= 0xF0
		temp2 &= 0xF0
		temp3 &= 0xF0

		if temp1 > 0xE0
			temp1 = 0xE0
		end if
		
		if temp2 > 0xE0
			temp2 = 0xE0
		end if

		if temp3 > 0xE0
			temp3 = 0xE0
		end if

		temp1 <<= 16
		temp2 <<= 8
		temp1 += temp2
		temp1 += temp3
		SetTableValue(temp1, temp0, PlayerObject_TailsSuperAltPal)
		temp0++
	loop
end function


function CPZSetup_InitSuperKnuxPal
	temp0 = 0

	GetPaletteEntry(1, 26, temp1)
	SetTableValue(temp1, temp0, PlayerObject_KnuxSuperAltPal)
	temp0++

	GetPaletteEntry(1, 27, temp1)
	SetTableValue(temp1, temp0, PlayerObject_KnuxSuperAltPal)
	temp0++

	GetPaletteEntry(1, 28, temp1)
	SetTableValue(temp1, temp0, PlayerObject_KnuxSuperAltPal)
	temp0++
end function


function CPZSetup_SpeedUpMusic
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30897)
			SwapMusicTrack("ChemicalPlant_F.ogg", TRACK_STAGE, 547578, 8000)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("ChemicalPlant_F.ogg", TRACK_STAGE, 547578)
			SwapMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30897, 8000)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
		case TRACK_SUPER
			SetMusicTrack("ChemicalPlant_F.ogg", TRACK_STAGE, 547578)
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, 30897)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SPEEDUP
	end if
end function


function CPZSetup_SlowDownMusic
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 38679)
			SwapMusicTrack("ChemicalPlant.ogg", TRACK_STAGE, 684580, 12500)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("ChemicalPlant.ogg", TRACK_STAGE, 684580)
			SwapMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 38679, 12500)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
		case TRACK_SUPER
			SetMusicTrack("ChemicalPlant.ogg", TRACK_STAGE, 684580)
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, 38679)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SLOWDOWN
	end if
end function


// ========================
// Events
// ========================

event ObjectMain
	GetTableValue(temp0, 21, StageSetup_oscillationTable)

	if temp0 == 0
		CPZSetup_rotatingStairTimer++
		CPZSetup_rotatingStairTimer &= 3
	end if

	object.rippleTimer++
	if object.rippleTimer > 7
		tileLayer[1].deformationOffset++
		object.rippleTimer = 0
	end if

	// Animate the converyor belts in the background
	object.aniTileTimer++
	if object.aniTileTimer == 5
		object.aniTileTimer = 0

		object.frame++
		object.frame &= 7
		temp0 = object.frame
		temp0 += 768
		Copy16x16Tile(767, temp0)
	end if

	if Water_flashTimer > 0
		Water_flashTimer--
	end if

	// Manage the various cycling palettes throughout the stage
	object.paletteTimer++
	if object.paletteTimer == 8
		object.paletteTimer = 0

		object.bgTowerLightPalIndex++
		object.bgTowerLightPalIndex &= 15
		GetTableValue(temp0, object.bgTowerLightPalIndex, CPZSetup_bgTowerLightPalTable)
		SetPaletteEntry(0, 175, temp0)

		object.rainbowLightPalIndex++
		object.rainbowLightPalIndex %= 21
		GetTableValue(temp0, object.rainbowLightPalIndex, CPZSetup_rainbowLightPalTable)
		SetPaletteEntry(0, 191, temp0)

		object.chemLiquidPalIndex1 += 3
		object.chemLiquidPalIndex1 %= 27
		GetTableValue(temp0, object.chemLiquidPalIndex1, CPZSetup_chemLiquidPalTable)
		SetPaletteEntry(0, 188, temp0)

		object.chemLiquidPalIndex2 += 3
		object.chemLiquidPalIndex2 %= 27
		GetTableValue(temp0, object.chemLiquidPalIndex2, CPZSetup_chemLiquidPalTable)
		SetPaletteEntry(0, 189, temp0)

		object.chemLiquidPalIndex3 += 3
		object.chemLiquidPalIndex3 %= 27
		GetTableValue(temp0, object.chemLiquidPalIndex3, CPZSetup_chemLiquidPalTable)
		SetPaletteEntry(0, 190, temp0)
	end if

	if CPZSetup_hasAchievement == false
		if stage.debugMode == false
			if stage.actNum == 2
				if object[30].type == TypeName[Act Finish]
					CPZSetup_hasAchievement = true
					if CPZSetup_enteredWater == false
						CallNativeFunction2(SetAchievement, AchievementName[100% Chemical Free], 100)
					end if
				end if
			end if
		end if
	end if
end event


event ObjectDraw
	if object.drawingIndex == 0
		temp0 = stage.waterLevel
		temp0 -= screen.yoffset
		if temp0 < 0
			temp0 = 0
		end if
		if temp0 > screen.ysize
			temp0 = screen.ysize
		end if

		SetActivePalette(0, 0, temp0)
		if Water_flashTimer > 0
			SetActivePalette(2, temp0, screen.ysize)
		else
			SetActivePalette(1, temp0, screen.ysize)
		end if

		AddDrawListEntityRef(2, object.entityPos)
	else
		temp0 = screen.xoffset
		temp0 *= 6
		temp0 >>= 3
		temp0 &= 0x1FF
		FlipSign(temp0)
		temp0 += object.scrollPos

		temp1 = screen.yoffset
		temp1 >>= 1
		temp1 &= 0xFF
		FlipSign(temp1)

		DrawSpriteScreenXY(0, temp0, temp1)
		DrawSpriteScreenXY(1, temp0, temp1)
	end if

	object.drawingIndex ^= 1
end event


event ObjectStartup
	LoadSpriteSheet("CPZ/Objects.gif")

	SetPaletteEntry(0, 192, 0x000000) // Set color index 192 to be black

	// Set the Chemical Plant music, and set its speedup/slowndown functions too
	SetMusicTrack("ChemicalPlant.ogg", TRACK_STAGE, 684580)
	SpeedUpMusic = CPZSetup_SpeedUpMusic
	SlowDownMusic = CPZSetup_SlowDownMusic

	// Sprite Frames - Foreground Girder
	SpriteFrame(-16, 0, 32, 256, 224, 0)
	SpriteFrame(-16, 256, 32, 256, 224, 0)

	// Conveyor Belt Tile - Frame 1
	Copy16x16Tile(767, 768)

	// Locky and Pocky are the ones swimming in these chemicals
	animalType1 = TypeName[Locky]
	animalType2 = TypeName[Pocky]

	// Set object 10 to be a CPZ Setup object
	object[SLOT_ZONESETUP].type 				= TypeName[CPZ Setup]
	object[SLOT_ZONESETUP].priority 			= PRIORITY_ACTIVE
	object[SLOT_ZONESETUP].drawOrder 			= 0
	object[SLOT_ZONESETUP].scrollPos 			= 496
	object[SLOT_ZONESETUP].chemLiquidPalIndex2 	= 1
	object[SLOT_ZONESETUP].chemLiquidPalIndex3 	= 2

	temp0 = screen.xcenter
	temp0 >>= 2
	object[SLOT_ZONESETUP].scrollPos -= temp0

	CPZSetup_rotatingStairTimer = 0

	// Load the water palette
	LoadPalette("CPZ_WaterPal.act", 1, 0, 0, 256)

	// Init underwater Super palettes
	CallFunction(CPZSetup_InitSuperSonicPal)
	CallFunction(CPZSetup_InitSuperTailsPal)
	CallFunction(CPZSetup_InitSuperKnuxPal)

	// Load the eletric flash palette in case the player tries to swim with a lightning shield
	LoadPalette("ElectricFlash.act", 2, 0, 0, 256)

	Water_flashTimer = 0

	arrayPos0 = 0
	while arrayPos0 < 576
		temp0 = arrayPos0
		temp0 &= 0x3F
		GetTableValue(stage.deformationData2[arrayPos0], temp0, CPZSetup_deformationTable)
		arrayPos0++
	loop

	if options.attractMode == true
		switch stage.playerListPos
		case PlayerName[SONIC]
			PlayerObject_ReplayTable 	= CPZSetup_replay_attract_S
			PlayerObject_ReplaySize 	= 109
			PlayerObject_ReplayLength 	= 1800
			break

		case PlayerName[TAILS]
			PlayerObject_ReplayTable 	= CPZSetup_replay_attract_T
			PlayerObject_ReplaySize 	= 216
			PlayerObject_ReplayLength 	= 1560
			break

		case PlayerName[KNUCKLES]
			PlayerObject_ReplayTable 	= CPZSetup_replay_attract_K
			PlayerObject_ReplaySize 	= 126
			PlayerObject_ReplayLength 	= 1680
			break
		end switch

		CallFunction(PlayerObject_InitReplay)
	end if
end event


event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
