// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: EHZ Setup Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.value1  : object.bgWaterPaletteTimer
private alias object.value4  : object.deformTimer

private alias object.value5  : object.bgLightDuration
private alias object.value6  : object.bgLightFrame

private alias object.value7  : object.pinkFlowerDuration
private alias object.value8  : object.pinkFlowerFrame

private alias object.value9  : object.redFlowerDuration
private alias object.value10 : object.redFlowerFrame

private alias object.value11 : object.rectFlowerDuration
private alias object.value12 : object.rectFlowerFrame

private alias object.value13 : object.pointyFlowerDuration
private alias object.value14 : object.pointyFlowerFrame

// Game Modes
private alias 0 : MODE_NOSAVE
private alias 1 : MODE_NORMAL
private alias 2 : MODE_TIMEATTACK

// Tracks
private alias 0 : TRACK_STAGE
private alias 1 : TRACK_ACTFINISH
private alias 2 : TRACK_INVINCIBLE
private alias 3 : TRACK_CONTINUE
private alias 4 : TRACK_BOSS
private alias 5 : TRACK_GAMEOVER
private alias 6 : TRACK_DROWNING
private alias 7 : TRACK_SUPER

// Reserved object slots
private alias 10 : SLOT_ZONESETUP
private alias 25 : SLOT_MUSICEVENT_CHANGE
private alias 26 : SLOT_MUSICEVENT_BOSS

// Music Events
private alias  0 : MUSICEVENT_FADETOBOSS
private alias  1 : MUSICEVENT_FADETOSTAGE
private alias  2 : MUSICEVENT_TRANSITION

private alias 0 : MUSICEVENT_FLAG_NOCHANGE
private alias 1 : MUSICEVENT_FLAG_SPEEDUP
private alias 2 : MUSICEVENT_FLAG_SLOWDOWN

// Music Loops
private alias 152750 : MUSIC_LOOP_EHZ_1P
private alias 122240 : MUSIC_LOOP_EHZ_1P_F

private alias 99572  : MUSIC_LOOP_EHZ_2P
private alias 79604  : MUSIC_LOOP_EHZ_2P_F

private alias 38679  : MUSIC_LOOP_INV
private alias 30897  : MUSIC_LOOP_INV_F


// ========================
// Function Declarations
// ========================
reserve function EHZSetup_SpeedUpMusic1P
reserve function EHZSetup_SlowDownMusic1P
reserve function EHZSetup_SpeedUpMusic2P
reserve function EHZSetup_SlowDownMusic2P

// ========================
// Static Values
// ========================
private value EHZSetup_hasAchievement = false


// ========================
// Tables
// ========================
private table EHZSetup_bgLightFrameTable
	508, 24, 509, 10, 510, 12, 511, 24, 510, 12, 509, 10
end table

private table EHZSetup_pinkFlowerFrameTable
	512, 128, 513, 20, 512, 8, 513, 8, 512, 8, 513, 8
end table

private table EHZSetup_redFlowerFrameTable
	514, 128, 515, 12, 514, 12, 515, 12, 514, 6, 515, 6, 514, 6, 515, 6
end table

private table EHZSetup_rectFlowerFrameTable
	516, 8, 517, 8
end table

private table EHZSetup_pointyFlowerFrameTable
	518, 128, 519, 8, 518, 8, 519, 8, 518, 8, 519, 12, 518, 12, 519, 12
end table

private table EHZSetup_deformationTable
	1, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 1, 2, 0, 0
	2, 0, 3, 2, 2, 3, 2, 2, 1, 3, 0, 0, 1, 0, 1, 3
	1, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 1, 2, 0, 0
	2, 0, 3, 2, 2, 3, 2, 2, 1, 3, 0, 0, 1, 0, 1, 3
end table

private table EHZSetup_replay_attract_S
	0x440000, 0x2910000
	0b00100000, 1
	0b00101000, 27
	0b00001000, 39
	0b00111000, 1
	0b00101000, 9
	0b00001000, 40
	0b00111000, 1
	0b00101000, 6
	0b00001000, 8
	0b00111000, 1
	0b00101000, 6
	0b00001000, 175
	0b00111000, 1
	0b00101000, 7
	0b00001000, 111
	0b00000000, 2
	0b00000100, 35
	0b00110100, 1
	0b00100100, 7
	0b00000100, 73
	0b00000000, 4
	0b00001000, 4
	0b00111000, 1
	0b00101000, 7
	0b00001000, 68
	0b00000000, 5
	0b00000100, 30
	0b00000000, 8
	0b00000010, 4
	0b00110010, 1
	0b00100010, 1
	0b00110010, 1
	0b00100000, 4
	0b00000000, 15
	0b00001000, 56
	0b00000000, 1
	0b00000010, 32
	0b00110010, 1
	0b00100010, 1
	0b00101010, 1
	0b00101000, 3
	0b00001000, 255
	0b00001000, 97
	0b00000000, 12
	0b00000100, 5
	0b00000000, 26
	0b00001000, 21
	0b00111000, 1
	0b00101000, 9
	0b00001000, 255
	0b00001000, 4
	0b00001010, 3
	0b00000010, 7
	0b00001010, 2
end table

private table EHZSetup_replay_attract_T
	0x440000, 0x2950000
	0b00100000, 13
	0b00101000, 38
	0b00001000, 47
	0b00111000, 1
	0b00101000, 12
	0b00001000, 224
	0b00111000, 1
	0b00101000, 5
	0b00001000, 69
	0b00111000, 1
	0b00101000, 8
	0b00100000, 2
	0b00000000, 2
	0b00001000, 12
	0b00000000, 28
	0b00001000, 16
	0b00000000, 1
	0b00001000, 255
	0b00001000, 5
	0b00111000, 1
	0b00101000, 24
	0b00001000, 218
	0b00111000, 1
	0b00101000, 9
	0b00001000, 50
	0b00000000, 1
	0b00000100, 7
	0b00000000, 16
	0b00001000, 174
	0b00111000, 1
	0b00101000, 12
	0b00001000, 7
	0b00111000, 1
	0b00101000, 8
	0b00001000, 4
	0b00111000, 1
	0b00101000, 5
	0b00001000, 3
	0b00000100, 2
	0b00110100, 1
	0b00100100, 5
	0b00000100, 4
	0b00110100, 1
	0b00100000, 5
	0b00000000, 4
	0b00000100, 1
	0b00110100, 1
	0b00100100, 3
	0b00000100, 4
	0b00110100, 1
	0b00100100, 4
	0b00000100, 5
	0b00110100, 1
	0b00100100, 3
	0b00000100, 1
	0b00000000, 2
	0b00001000, 2
	0b00111000, 1
	0b00101000, 3
	0b00100000, 2
	0b00000000, 1
	0b00001000, 5
	0b00000000, 5
	0b00001000, 3
	0b00111000, 1
	0b00101000, 2
	0b00001000, 1
	0b00000000, 9
	0b00001000, 5
	0b00000000, 15
	0b00001000, 22
	0b00000000, 3
	0b00000100, 2
	0b00110100, 1
	0b00100100, 9
	0b00100000, 2
	0b00101000, 8
	0b00001000, 4
	0b00111000, 1
	0b00101000, 4
	0b00100000, 1
	0b00000000, 3
	0b00110000, 1
	0b00100000, 6
	0b00000000, 4
	0b00110000, 1
	0b00100000, 5
	0b00000000, 1
	0b00001000, 3
	0b00000000, 1
	0b00110000, 1
	0b00100000, 5
	0b00000000, 3
	0b00110000, 1
	0b00100000, 3
	0b00101000, 3
	0b00001000, 2
	0b00000000, 1
	0b00110000, 1
	0b00100000, 5
	0b00000000, 5
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00000000, 5
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 5
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00000000, 5
	0b00110000, 1
	0b00100000, 4
	0b00000000, 5
	0b00110000, 1
	0b00100000, 4
	0b00000000, 5
	0b00110000, 1
	0b00100000, 5
	0b00000000, 3
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 5
	0b00000000, 3
	0b00110000, 1
	0b00100000, 5
	0b00000000, 3
	0b00110000, 1
	0b00100000, 6
	0b00000000, 3
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00000000, 4
	0b00110000, 1
	0b00100000, 4
	0b00101000, 2
	0b00001000, 39
	0b00111000, 1
	0b00101000, 12
	0b00001000, 13
	0b00000000, 17
	0b00001000, 4
	0b00000000, 12
	0b00000100, 11
	0b00001000, 8
end table

private table EHZSetup_replay_attract_K
	0x440000, 0x2910000
	0b00000000, 18
	0b00001000, 77
	0b00111000, 1
	0b00101000, 13
	0b00001000, 70
	0b00111000, 1
	0b00101000, 14
	0b00001000, 3
	0b00000000, 22
	0b00000100, 4
	0b00000000, 3
	0b00110000, 1
	0b00100000, 16
	0b00101000, 3
	0b00001000, 1
	0b00000000, 30
	0b00110000, 1
	0b00100000, 38
	0b00101000, 149
	0b00001000, 11
	0b00000000, 3
	0b00000100, 6
	0b00000000, 4
	0b00000100, 5
	0b00000000, 5
	0b00001000, 13
	0b00000000, 14
	0b00000100, 89
	0b00000000, 6
	0b00001000, 44
	0b00001010, 1
	0b00000010, 13
	0b00000000, 52
	0b00001000, 59
	0b00111000, 1
	0b00101000, 17
	0b00001000, 18
	0b00000000, 4
	0b00000100, 33
	0b00000000, 1
	0b00001000, 105
	0b00111000, 1
	0b00101000, 30
	0b00001000, 45
	0b00000100, 6
	0b00000000, 52
	0b00001000, 6
	0b00111000, 1
	0b00101000, 19
	0b00001000, 54
	0b00001010, 6
	0b00000010, 17
	0b00001010, 2
	0b00001000, 58
	0b00111000, 1
	0b00101000, 4
	0b00001000, 197
	0b00111000, 1
	0b00101001, 10
	0b00001001, 14
	0b00111001, 1
	0b00101001, 40
	0b00100001, 4
	0b00000001, 126
	0b00001001, 12
	0b00001000, 6
	0b00111000, 1
	0b00101000, 12
end table

public function EHZSetup_SpeedUpMusic1P
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult
	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F)
			SwapMusicTrack("EmeraldHill_F.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_1P_F, 8000)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("EmeraldHill_F.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_1P_F)
			SwapMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F, 8000)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
		case TRACK_SUPER
			SetMusicTrack("EmeraldHill_F.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_1P_F)
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SPEEDUP
	end if
end function


public function EHZSetup_SlowDownMusic1P
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult

	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV)
			SwapMusicTrack("EmeraldHill.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_1P, 12500)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("EmeraldHill.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_1P)
			SwapMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV, 12500)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
		case TRACK_SUPER
			SetMusicTrack("EmeraldHill.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_1P)
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SLOWDOWN
	end if
end function


public function EHZSetup_SpeedUpMusic2P
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult

	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F)
			SwapMusicTrack("EmeraldHill2_F.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_2P_F, 8000)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("EmeraldHill2_F.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_2P_F)
			SwapMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F, 8000)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
		case TRACK_SUPER
			SetMusicTrack("EmeraldHill2_F.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_2P_F)
			SetMusicTrack("Invincibility_F.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV_F)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SPEEDUP
	end if
end function


public function EHZSetup_SlowDownMusic2P
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].type, TypeName[Music Event])
	temp0 = checkResult
	CheckEqual(object[SLOT_MUSICEVENT_CHANGE].propertyValue, 2)
	temp0 &= checkResult
	CheckEqual(stage.musicFlag, MUSICEVENT_FLAG_NOCHANGE)
	temp0 &= checkResult

	if temp0 == false
		switch music.currentTrack
		case TRACK_STAGE
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV)
			SwapMusicTrack("EmeraldHill2.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_2P, 12500)
			break

		case TRACK_INVINCIBLE
			SetMusicTrack("EmeraldHill2.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_2P)
			SwapMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV, 12500)
			break

		case TRACK_BOSS
		case TRACK_DROWNING
		case TRACK_SUPER
			SetMusicTrack("EmeraldHill2.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_2P)
			SetMusicTrack("Invincibility.ogg", TRACK_INVINCIBLE, MUSIC_LOOP_INV)
			break
		end switch
	else
		stage.musicFlag = MUSICEVENT_FLAG_SLOWDOWN
	end if
end function


// ========================
// Events
// ========================

event ObjectUpdate
	// What's this check supposed to be?
	// This object's state always seems to be 0, and 5 is such a strange number...
	if object.state < 5
		object.bgWaterPaletteTimer++
		if object.bgWaterPaletteTimer == 8
			object.bgWaterPaletteTimer = 0
			GetPaletteEntry(0, 159, temp1)

			GetPaletteEntry(0, 158, temp0)
			SetPaletteEntry(0, 159, temp0)

			GetPaletteEntry(0, 148, temp0)
			SetPaletteEntry(0, 158, temp0)

			GetPaletteEntry(0, 147, temp0)
			SetPaletteEntry(0, 148, temp0)

			SetPaletteEntry(0, 147, temp1)
		end if
	end if

	object.deformTimer++
	if object.deformTimer > 7
		tileLayer[1].deformationOffset++
		object.deformTimer = 0
	end if

	if object.bgLightDuration < 2
		GetTableValue(temp0, object.bgLightFrame, EHZSetup_bgLightFrameTable)

		Copy16x16Tile(502, temp0)
		temp0 += 12

		Copy16x16Tile(503, temp0)
		temp0 += 4

		Copy16x16Tile(504, temp0)
		object.bgLightFrame++
		
		GetTableValue(object.bgLightDuration, object.bgLightFrame, EHZSetup_bgLightFrameTable)
		object.bgLightFrame++

		object.bgLightFrame %= 12
	else
		object.bgLightDuration--
	end if

	if object.pinkFlowerDuration < 2
		GetTableValue(temp0, object.pinkFlowerFrame, EHZSetup_pinkFlowerFrameTable)

		Copy16x16Tile(764, temp0)
		object.pinkFlowerFrame++

		GetTableValue(object.pinkFlowerDuration, object.pinkFlowerFrame, EHZSetup_pinkFlowerFrameTable)
		object.pinkFlowerFrame++

		object.pinkFlowerFrame %= 12
	else
		object.pinkFlowerDuration--
	end if

	if object.redFlowerDuration < 2
		GetTableValue(temp0, object.redFlowerFrame, EHZSetup_redFlowerFrameTable)

		Copy16x16Tile(765, temp0)
		object.redFlowerFrame++

		GetTableValue(object.redFlowerDuration, object.redFlowerFrame, EHZSetup_redFlowerFrameTable)
		object.redFlowerFrame++

		object.redFlowerFrame &= 15
	else
		object.redFlowerDuration--
	end if

	if object.rectFlowerDuration < 2
		GetTableValue(temp0, object.rectFlowerFrame, EHZSetup_rectFlowerFrameTable)

		Copy16x16Tile(766, temp0)
		object.rectFlowerFrame++

		GetTableValue(object.rectFlowerDuration, object.rectFlowerFrame, EHZSetup_rectFlowerFrameTable)
		object.rectFlowerFrame++

		object.rectFlowerFrame &= 3
	else
		object.rectFlowerDuration--
	end if

	if object.pointyFlowerDuration < 2
		GetTableValue(temp0, object.pointyFlowerFrame, EHZSetup_pointyFlowerFrameTable)

		Copy16x16Tile(767, temp0)
		object.pointyFlowerFrame++

		GetTableValue(object.pointyFlowerDuration, object.pointyFlowerFrame, EHZSetup_pointyFlowerFrameTable)
		object.pointyFlowerFrame++

		object.pointyFlowerFrame &= 15
	else
		object.pointyFlowerDuration--
	end if

	if EHZSetup_hasAchievement == false
		if stage.debugMode == false
			if specialStage.emeralds >= 127
				if options.gameMode == MODE_NOSAVE
					EHZSetup_hasAchievement = true
					// Get all emeralds in Emerald Hill achievment
					CallNativeFunction2(SetAchievement, 2, 100)
				end if

				if options.gameMode == MODE_NORMAL
					arrayPos1 = options.saveSlot
					arrayPos1 <<= 3
					arrayPos1 += 4
					if saveRAM[arrayPos1] < 20 // Make sure our save file hasn't been completed, you have to play by the rules and do it on the first go!
						EHZSetup_hasAchievement = true
						CallNativeFunction2(SetAchievement, 2, 100)
					end if
				end if
			end if
		end if
	end if
end event


event ObjectStartup
	if stage.activeList != BONUS_STAGE
		// Different music based on the current mode
		// To accommodate the different music, there are also separate speedup and slowdown functions for each track

		if options.vsMode == false
			SetMusicTrack("EmeraldHill.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_1P)
			SpeedUpMusic = EHZSetup_SpeedUpMusic1P
			SlowDownMusic = EHZSetup_SlowDownMusic1P
		else
			SetMusicTrack("EmeraldHill2.ogg", TRACK_STAGE, MUSIC_LOOP_EHZ_2P)
			SpeedUpMusic = EHZSetup_SpeedUpMusic2P
			SlowDownMusic = EHZSetup_SlowDownMusic2P
		end if
	else
		// In the Boss Attack version of the state, play the DEZ track instead
		SetMusicTrack("DeathEgg.ogg", TRACK_STAGE, true)
	end if

	animalType1 = TypeName[Flicky]
	animalType2 = TypeName[Ricky]
	
	tileLayer[1].scrollPos = -0x80000

	arrayPos0 = 0
	while arrayPos0 < 576
		temp0 = arrayPos0
		temp0 &= 0x3F
		GetTableValue(stage.deformationData2[arrayPos0], temp0, EHZSetup_deformationTable)
		arrayPos0++
	loop

	object[SLOT_ZONESETUP].type = TypeName[EHZ Setup]
	object[SLOT_ZONESETUP].priority = 1

	// Reset the boss flash colour
	SetPaletteEntry(0, 192, 0x000000)

	if options.attractMode == true
		switch stage.playerListPos
		case 0
			PlayerObject_ReplayTable = EHZSetup_replay_attract_S
			PlayerObject_ReplaySize = 110
			PlayerObject_ReplayLength = 1620
			break

		case 1
			PlayerObject_ReplayTable = EHZSetup_replay_attract_T
			PlayerObject_ReplaySize = 318
			PlayerObject_ReplayLength = 1800
			break

		case 2
			PlayerObject_ReplayTable = EHZSetup_replay_attract_K
			PlayerObject_ReplaySize = 138
			PlayerObject_ReplayLength = 1800
			break
		end switch

		CallFunction(PlayerObject_InitReplay)
	end if
end event


event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
