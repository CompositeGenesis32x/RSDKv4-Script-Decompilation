// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Spiked Ledge Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.value0 : object.timer
private alias object.value1 : object.originX
private alias object.value2 : object.collisionOffset.x

private alias 0 : SPIKEDLEDGE_WAITING
private alias 1 : SPIKEDLEDGE_MOVING
private alias 2 : SPIKEDLEDGE_MOVED

// Player aliases
private alias object.value42 : player.prevGravity

// ========================
// Function Declarations
// ========================
reserve function SpikedLedge_DebugDraw
reserve function SpikedLedge_DebugSpawn


function SpikedLedge_DebugDraw
	DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
end function


function SpikedLedge_DebugSpawn
	CreateTempObject(TypeName[Spiked Ledge], 0, object.xpos, object.ypos)
	object[tempObjectPos].direction = object.direction

	if object.direction == FLIP_NONE
		object[tempObjectPos].xvel = -0x10000
	else
		object[tempObjectPos].xvel = 0x10000
	end if
end function


event ObjectMain
	switch object.state
	case SPIKEDLEDGE_WAITING
		foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
			if player[currentPlayer].prevGravity == GRAVITY_GROUND
				// Check if the ledge should advance if the player is in range
				if object.direction == FLIP_NONE
					BoxCollisionTest(C_TOUCH, object.entityPos, -192, -16, -64, -14, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				else
					BoxCollisionTest(C_TOUCH, object.entityPos, 64, -16, 192, -14, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
				end if
			else
				checkResult = false
			end if

			if checkResult == true
				if object.priority != PRIORITY_XBOUNDS_DESTROY
					object.priority = PRIORITY_ACTIVE
				end if

				object.state = SPIKEDLEDGE_MOVING
				object.collisionOffset.x = object.xvel
			end if
		next
		break

	case SPIKEDLEDGE_MOVING
		object.xpos += object.xvel
		object.timer++
		if object.timer == 128
			object.timer = 0
			object.collisionOffset.x = 0
			object.state++
		end if
		break

	case SPIKEDLEDGE_MOVED
		break
	end switch

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		BoxCollisionTest(C_BOX2, object.entityPos, -64, -16, 64, 16, currentPlayer, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO, HITBOX_AUTO)
		switch checkResult
		case COL_TOP
			object[currentPlayer].xpos += object.collisionOffset.x
			break

		case COL_LEFT
			if object.direction == FLIP_NONE
				CallFunction(PlayerObject_Hit)
			end if
			break

		case COL_RIGHT
			if object.direction == FLIP_X
				CallFunction(PlayerObject_Hit)
			end if
			break
		end switch
	next

	if object.outOfBounds == true
		// If the object's out of bounds, then only unload it if its origin position is OOB as well
		temp0 = object.xpos
		object.xpos = object.originX
		if object.outOfBounds == true
			if object.priority != PRIORITY_XBOUNDS_DESTROY
				object.priority = PRIORITY_ACTIVE_BOUNDS
			end if
			object.collisionOffset.x = 0
			object.state = SPIKEDLEDGE_WAITING
		else
			object.xpos = temp0
		end if
	end if
end event


event ObjectDraw
	DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
end event


event ObjectStartup
	LoadSpriteSheet("MCZ/Objects.gif")

	SpriteFrame(-64, -16, 128, 32, 1, 99)

	foreach (TypeName[Spiked Ledge], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].originX = object[arrayPos0].xpos
		object[arrayPos0].direction = object[arrayPos0].propertyValue
		object[arrayPos0].direction &= FLIP_X
		if object[arrayPos0].direction == FLIP_NONE
			object[arrayPos0].xvel = -0x10000
		else
			object[arrayPos0].xvel = 0x10000
		end if
	next

	SetTableValue(TypeName[Spiked Ledge], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(SpikedLedge_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(SpikedLedge_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++
end event

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
		case 0 // direction
			checkResult = object.direction
			checkResult &= FLIP_X
			break
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
		case 0 // direction
			object.direction = editor.variableValue
			object.direction &= FLIP_X
			break
		end switch
	end if
end event

event RSDKDraw
	DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
end event

event RSDKLoad
	LoadSpriteSheet("MCZ/Objects.gif")
	SpriteFrame(-64, -16, 128, 32, 1, 99)

	AddEditorVariable("direction")
	SetActiveVariable("direction")
	AddEnumVariable("Left", FLIP_NONE)
	AddEnumVariable("Right", FLIP_X)
end event
