// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Player Object Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.value0  : object.rings
private alias object.value1  : object.timer
private alias object.value2  : object.zpos
private alias object.value3  : object.xBoundsR
private alias object.value4  : object.frameOffset
// value5 is unused
private alias object.value6  : object.spinTimer
private alias object.value7  : object.invincibilityTimer
// value8 is unused
private alias object.value9  : object.xBoundsL
private alias object.value10 : object.groundPos
private alias object.value11 : object.shadowPos.x
private alias object.value12 : object.shadowPos.y
private alias object.value13 : object.shadowPos.u
private alias object.value14 : object.stagePos.z
private alias object.value15 : object.stagePos.x
private alias object.value16 : object.stagePos.y
private alias object.value17 : object.playerFrame
private alias object.value18 : object.stateInput
private alias object.value19 : object.vsCheckpointID
private alias object.value20 : object.vsCheckpoint1Rings
private alias object.value21 : object.vsCheckpoint2Rings
private alias object.value22 : object.vsCheckpoint3Rings
private alias object.value23 : object.playerTagFrame
private alias object.value24 : object.currentLeader
private alias object.value25 : object.changedLeader
private alias object.value26 : object.automoveActive

// Halfpipe Aliases
private alias object.value13 : halfpipe.playerPos.z
private alias object.value14 : halfpipe.worldTranslation.x
private alias object.value15 : halfpipe.worldTranslation.y
private alias object.value16 : halfpipe.worldTranslation.z
private alias object.value17 : halfpipe.worldRotation.x
private alias object.value18 : halfpipe.worldRotation.y
private alias object.value19 : halfpipe.worldRotation.z

// LoseRing Aliases
private alias object.value1 : loseRing.gravityStrength

// ========================
// Function Declarations
// ========================
reserve function PlayerObject_ProcessP1Inputs
reserve function PlayerObject_ProcessP2Inputs
reserve function PlayerObject_HandleGround
reserve function PlayerObject_HandleAir
reserve function PlayerObject_HurtSpin
reserve function PlayerObject_RingLoss
reserve function PlayerObject_ProcessDrawing
reserve function PlayerObject_Process2PVSPlayer

// ========================
// Static Values
// ========================
private value PlayerObject_stateUp = 0
private value PlayerObject_stateDown = 0
private value PlayerObject_stateLeft = 0
private value PlayerObject_stateRight = 0
private value PlayerObject_stateJumpPress = 0
private value PlayerObject_stateJumpHold = 0

private value PlayerObject_ReplayTable = 0
private value PlayerObject_ReplayTablePos = 0
private value PlayerObject_ReplaySize = 0
private value PlayerObject_ReplayFrameCnt = 0
private value PlayerObject_ReplayLength = 0
private value PlayerObject_ReplayManager = 0

// What player is in front right now
private value PlayerObject_leadingPlayer = 0

// ========================
// Tables
// ========================

// Shadow Y Positions, with index 0 being as far left/right as it goes, and the last index being the center
private table PlayerObject_shadowYPosTable
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127
	-127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -124, -124
	-124, -124, -123, -123, -123, -123, -122, -122, -122, -121, -121, -121, -120, -120, -119, -119
	-119, -118, -118, -117, -117, -116, -116, -116, -115, -115, -114, -114, -113, -112, -112, -111
	-111, -110, -110, -109, -108, -108, -107, -106, -106, -105, -104, -104, -103, -102, -101, -101
	-100,  -99,  -98,  -97,  -96,  -96,  -95,  -94,  -93,  -92,  -91,  -90,  -89,  -88,  -87,  -85
	-84,   -83,  -82,  -81,  -79,  -78,  -77,  -75,  -74,  -72,  -71,  -69,  -68,  -66,  -64,  -62
	-61,   -59,  -57,  -54,  -52,  -50,  -47,  -45,  -42,  -39,  -35,  -31,  -27,  -21,  -13,    0
end table

function PlayerObject_ProcessDrawing
	MatrixRotateXYZ(MAT_WORLD, halfpipe[0].worldRotation.x, halfpipe[0].worldRotation.y, halfpipe[0].worldRotation.z)
	MatrixTranslateXYZ(MAT_TEMP, halfpipe[0].worldTranslation.x, halfpipe[0].worldTranslation.y, halfpipe[0].worldTranslation.z)
	MatrixMultiply(MAT_WORLD, MAT_TEMP)

	arrayPos0 = scene3D.vertexCount
	arrayPos1 = scene3D.faceCount

	// Draw Shadow
	faceBuffer[arrayPos1].flag = FACE_TEXTURED_C_BLEND
	faceBuffer[arrayPos1].a = arrayPos0
	vertexBuffer[arrayPos0].x = object.shadowPos.x
	vertexBuffer[arrayPos0].y = object.shadowPos.y
	vertexBuffer[arrayPos0].z = object.zpos
	vertexBuffer[arrayPos0].u = object.shadowPos.u
	vertexBuffer[arrayPos0].v = 50
	arrayPos2 = arrayPos0
	arrayPos0++
	TransformVertices(MAT_WORLD, arrayPos2, arrayPos0)

	faceBuffer[arrayPos1].b = arrayPos0
	vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
	vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
	vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
	if object.zpos > 0x800
		vertexBuffer[arrayPos0].u = 0x600
		vertexBuffer[arrayPos0].v = 0x600
	else
		vertexBuffer[arrayPos0].u = 0x580
		vertexBuffer[arrayPos0].v = 0x580
	end if
	arrayPos0++

	faceBuffer[arrayPos1].c = arrayPos0
	vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
	vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
	vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
	vertexBuffer[arrayPos0].u = 17
	vertexBuffer[arrayPos0].v = 16
	arrayPos0++

	faceBuffer[arrayPos1].d = arrayPos0
	vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
	vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
	vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
	arrayPos0++

	arrayPos1++
	scene3D.vertexCount += 4
	scene3D.faceCount++

	// Draw Player
	if object.visible == true
		arrayPos2 = arrayPos0
		arrayPos0++

		faceBuffer[arrayPos1].flag = FACE_SPRITE_3D
		faceBuffer[arrayPos1].a = arrayPos2
		vertexBuffer[arrayPos2].x = object.xpos
		vertexBuffer[arrayPos2].x >>= 1
		object.stagePos.x = vertexBuffer[arrayPos2].x

		vertexBuffer[arrayPos2].y = object.ypos
		vertexBuffer[arrayPos2].y >>= 1
		object.stagePos.y = vertexBuffer[arrayPos2].y

		vertexBuffer[arrayPos2].z = object.zpos
		TransformVertices(MAT_WORLD, arrayPos2, arrayPos0)

		vertexBuffer[arrayPos2].u = TypeName[Player Object]
		vertexBuffer[arrayPos2].v = FX_ROTATE
		faceBuffer[arrayPos1].b = arrayPos0
		vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
		vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
		vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
		vertexBuffer[arrayPos0].u = object.frame
		vertexBuffer[arrayPos0].v = 0
		arrayPos0++

		faceBuffer[arrayPos1].c = arrayPos0
		vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
		vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
		vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
		vertexBuffer[arrayPos0].u = 0x200
		vertexBuffer[arrayPos0].v = object.rotation
		arrayPos0++

		faceBuffer[arrayPos1].d = arrayPos0
		vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
		vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
		vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
		scene3D.vertexCount += 4
		scene3D.faceCount++

 		// if tails, draw tails
		if object.frameOffset == 16
			if object.animation == 0
				arrayPos0++
				arrayPos1++
				faceBuffer[arrayPos1].flag = FACE_SPRITE_3D
				faceBuffer[arrayPos1].a = arrayPos0
				vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
				vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
				vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
				vertexBuffer[arrayPos0].u = TypeName[Player Object]
				vertexBuffer[arrayPos0].v = FX_ROTATE
				arrayPos0++

				faceBuffer[arrayPos1].b = arrayPos0
				vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
				vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
				vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
				vertexBuffer[arrayPos0].u = object.playerFrame
				vertexBuffer[arrayPos0].u >>= 2
				vertexBuffer[arrayPos0].u += 48
				vertexBuffer[arrayPos0].v = 0
				arrayPos0++

				faceBuffer[arrayPos1].c = arrayPos0
				vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
				vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
				vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
				vertexBuffer[arrayPos0].u = 0x200
				vertexBuffer[arrayPos0].v = object.rotation
				arrayPos0++

				faceBuffer[arrayPos1].d = arrayPos0
				vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
				vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
				vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
				scene3D.vertexCount += 4
				scene3D.faceCount++
			end if
		end if
	end if

	// if active, draw 1P/2P Tag
	if object.playerTagFrame > 0
		arrayPos0++
		arrayPos1++
		faceBuffer[arrayPos1].flag = FACE_SPRITE_3D
		faceBuffer[arrayPos1].a = arrayPos0
		vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
		vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
		vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
		vertexBuffer[arrayPos0].u = TypeName[Player Object]
		vertexBuffer[arrayPos0].v = FX_ROTATE
		arrayPos0++

		faceBuffer[arrayPos1].b = arrayPos0
		vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
		vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
		vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
		vertexBuffer[arrayPos0].u = object.playerTagFrame
		vertexBuffer[arrayPos0].v = 0
		arrayPos0++

		faceBuffer[arrayPos1].c = arrayPos0
		vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
		vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
		vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
		vertexBuffer[arrayPos0].u = 0x200
		vertexBuffer[arrayPos0].v = 0
		arrayPos0++

		faceBuffer[arrayPos1].d = arrayPos0
		vertexBuffer[arrayPos0].x = vertexBuffer[arrayPos2].x
		vertexBuffer[arrayPos0].y = vertexBuffer[arrayPos2].y
		vertexBuffer[arrayPos0].z = vertexBuffer[arrayPos2].z
		scene3D.vertexCount += 4
		scene3D.faceCount++
	end if
end function


function PlayerObject_ProcessP1Inputs
	if options.attractMode == false
		if options.touchControls == true
			if object.controlMode == 0
				CheckTouchRect(0, 96, screen.xcenter, screen.ysize)
				if checkResult > -1
					arrayPos0 = checkResult
					temp0 = touchscreen[arrayPos0].xpos
					temp0 -= saveRAM[39]
					if temp0 > 0
						inputDown.right = true
					else
						inputDown.left = true
					end if
				end if

				CheckTouchRect(screen.xcenter, 96, screen.xsize, 240)
				if checkResult > -1
					inputDown.buttonA = true
				end if

				if touchJump == false
					inputPress.buttonA |= inputDown.buttonA
				end if

				touchJump = inputDown.buttonA
				if stage.debugMode == true
					CheckTouchRect(0, 0, 112, 56)
					if checkResult > -1
						inputDown.buttonB = true
					end if

					if touchDebug == false
						inputPress.buttonB |= inputDown.buttonB
					end if
					
					touchDebug = inputDown.buttonB
				end if

				CheckTouchRect(240, 0, screen.xsize, 40)
				if checkResult > -1
					if options.vsMode == false
						PlaySfx(SfxName[Menu Back], false)
						engine.state = ENGINE_INITPAUSE
					end if
				end if

				if inputPress.start == true
					if options.vsMode == false
						PlaySfx(SfxName[Menu Back], false)
						engine.state = ENGINE_INITPAUSE
					end if
				end if
			end if
		end if

		ProcessObjectControl()

		if options.vsMode == true
			object.currentLeader = PlayerObject_leadingPlayer
			CallNativeFunction2(SendEntity, 2, false)
		end if
	else
		CheckTouchRect(0, 0, screen.xsize, screen.ysize)
		if inputPress.start == true
			checkResult = 0
		end if

		if checkResult > -1
			if PlayerObject_ReplayLength > 1
				PlayerObject_ReplayLength = 1
			end if
		end if

		if inputPress.start == true
			PlayerObject_ReplayLength = 1
		end if

		PlayerObject_ReplayFrameCnt--
		if PlayerObject_ReplayFrameCnt < 1
			if PlayerObject_ReplayTablePos < PlayerObject_ReplaySize
				GetTableValue(temp0, PlayerObject_ReplayTablePos, PlayerObject_ReplayTable)
				GetBit(object.up, temp0, 0)
				GetBit(object.down, temp0, 1)
				GetBit(object.left, temp0, 2)
				GetBit(object.right, temp0, 3)
				GetBit(object.jumpPress, temp0, 4)
				GetBit(object.jumpHold, temp0, 5)
				PlayerObject_ReplayTablePos++

				GetTableValue(PlayerObject_ReplayFrameCnt, PlayerObject_ReplayTablePos, PlayerObject_ReplayTable)
				PlayerObject_ReplayTablePos++
			end if
		else
			if object.jumpPress == true
				object.jumpPress = false
			end if
		end if

		if PlayerObject_ReplayLength > 0
			PlayerObject_ReplayLength--
			if PlayerObject_ReplayLength < 1
				// Should Prolly be titlecard or smth, blank object state 8 wont do a thing lol
				arrayPos0 = PlayerObject_ReplayManager
				object[arrayPos0].type = TypeName[Blank Object]
				object[arrayPos0].state = 8
				object[arrayPos0].priority = PRIORITY_ACTIVE
				object[arrayPos0].drawOrder = 6
			end if
		end if
	end if

	if object.invincibilityTimer > 0
		object.invincibilityTimer--
		GetBit(temp0, object.invincibilityTimer, 2)
		if temp0 == true
			object.visible = false
		else
			object.visible = true
		end if
	end if
end function


function PlayerObject_ProcessP2Inputs
	PlayerObject_stateUp <<= 1
	PlayerObject_stateUp |= object[2].up
	PlayerObject_stateUp &= 0xFFFF

	PlayerObject_stateDown <<= 1
	PlayerObject_stateDown |= object[2].down
	PlayerObject_stateDown &= 0xFFFF

	PlayerObject_stateLeft <<= 1
	PlayerObject_stateLeft |= object[2].left
	PlayerObject_stateLeft &= 0xFFFF

	PlayerObject_stateRight <<= 1
	PlayerObject_stateRight |= object[2].right
	PlayerObject_stateRight &= 0xFFFF

	PlayerObject_stateJumpPress <<= 1
	PlayerObject_stateJumpPress |= object[2].jumpPress
	PlayerObject_stateJumpPress &= 0xFFFF

	PlayerObject_stateJumpHold <<= 1
	PlayerObject_stateJumpHold |= object[2].jumpHold
	PlayerObject_stateJumpHold &= 0xFFFF

	temp0 = PlayerObject_stateUp
	temp0 >>= 15
	object.up = temp0

	temp0 = PlayerObject_stateDown
	temp0 >>= 15
	object.down = temp0

	temp0 = PlayerObject_stateLeft
	temp0 >>= 15
	object.left = temp0

	temp0 = PlayerObject_stateRight
	temp0 >>= 15
	object.right = temp0

	temp0 = PlayerObject_stateJumpPress
	temp0 >>= 15
	object.jumpPress = temp0

	temp0 = PlayerObject_stateJumpHold
	temp0 >>= 15
	object.jumpHold = temp0

	if object.invincibilityTimer > 0
		object.invincibilityTimer--
		GetBit(temp0, object.invincibilityTimer, 2)
		if temp0 == true
			object.visible = false
		else
			object.visible = true
		end if
	end if
end function


function PlayerObject_Process2PVSPlayer
	temp0 = object.playerTagFrame
	CallNativeFunction2(ReceiveEntity, 3, true)
	object.type = TypeName[Player Object]
	object.stateInput = PlayerObject_Process2PVSPlayer
	object.playerTagFrame = temp0

	if vs.playerID == 1
		PlayerObject_leadingPlayer = object.currentLeader
	end if

	if object.invincibilityTimer > 0
		object.invincibilityTimer--
		GetBit(temp0, object.invincibilityTimer, 2)
		if temp0 == true
			object.visible = false
		else
			object.visible = true
		end if
	end if
end function


function PlayerObject_HandleGround
	if object.right == true
		object.speed -= 48
		if object.speed < -0x600
			object.speed = -0x600
		end if

		object.automoveActive = false
		object.timer = 0
	else
		if object.left == true
			object.speed += 48
			if object.speed > 0x600
				object.speed = 0x600
			end if

			object.automoveActive = false
			object.timer = 0
		else
			if object.automoveActive == false
				object.timer = 60
				object.automoveActive = true
			end if

			temp0 = object.speed
			temp0 >>= 4
			object.speed -= temp0
		end if
	end if

	temp0 = object.speed
	if object.rotation != 0
		temp0 /= 256
		temp0 *= 128
	else
		temp0 >>= 1
	end if

	object.angle += temp0
	object.angle &= 0xFFFF
	object.rotation = object.angle
	object.rotation >>= 7

	// Wait for it....
	if object.timer > 0
		object.timer--
	else
		// Move to center
		temp1 = object.rotation
		temp1 >>= 1
		Sin256(temp0, temp1)
		temp0 *= -80
		temp0 >>= 9
		object.speed += temp0
	end if

	Sin(object.xpos, object.rotation)
	object.xpos *= object.xBoundsL
	object.xpos >>= 9

	Cos(object.ypos, object.rotation)
	object.ypos *= object.xBoundsL
	object.ypos >>= 9

	object.animation = 0
	object.animationSpeed = 60
	temp0 = object.rotation
	object.changedLeader = false

	if object.jumpPress == true
		object.speed = 0
		Sin(object.xvel, object.rotation)
		object.xvel *= 0x5A0
		object.xvel >>= 9
		Cos(object.yvel, object.rotation)
		object.yvel *= 0x980
		object.yvel >>= 9
		object.state = PlayerObject_HandleAir
		object.rotation = 0
		object.frame = 8
		object.frame += object.frameOffset
		object.animation = 8
		object.animationSpeed = 60
		object.animationTimer = 0
		object.gravity = GRAVITY_AIR
		PlaySfx(SfxName[Jump], false)
	else
		if object.rotation > 152
			if object.rotation < 360
				if object.speed < 128
					if object.speed > -128
						object.xvel = object.speed
						object.speed = 0
						object.state = PlayerObject_HandleAir
						object.yvel = 0
					end if
				end if
			end if
		end if
	end if
	if temp0 > 128
		if temp0 < 384
			temp0 += 256
			FlipSign(temp0)
			temp0 &= 511
		end if
	end if

	Sin(object.shadowPos.x, temp0)
	object.shadowPos.x *= -52
	object.shadowPos.x >>= 1

	Cos(object.shadowPos.y, temp0)
	object.shadowPos.y *= -52
	object.shadowPos.y >>= 1

	object.shadowPos.u = 116

	if temp0 < 256
		if temp0 > 112
			object.shadowPos.u = 224
		else
			if temp0 > 39
				object.shadowPos.u = 149
			end if
		end if
	else
		if temp0 < 400
			object.shadowPos.u = 215
		else
			if temp0 < 473
				object.shadowPos.u = 182
			end if
		end if
	end if

	if object.rotation < 40
		object.rotation = 0
	end if

	if object.rotation > 472
		object.rotation = 0
	end if
end function


function PlayerObject_HandleAir
	if options.vsMode == true
		if object.changedLeader == false
			PlayerObject_leadingPlayer ^= 1
			object.changedLeader = true
		end if
	end if

	object.xpos += object.xvel
	if object.xpos <= object.xBoundsL
		object.xpos = object.xBoundsL
	end if

	if object.xpos >= object.xBoundsR
		object.xpos = object.xBoundsR
	end if

	if object.left == true
		object.xvel -= 32
	end if

	if object.right == true
		object.xvel += 32
	end if

	object.ypos += object.yvel
	object.yvel -= 88
	if object.ypos < 0
		temp0 = object.xpos
		temp0 *= object.xpos
		temp1 = object.ypos
		temp1 *= object.ypos
		temp0 += temp1
		if temp0 > object.groundPos
			object.state = PlayerObject_HandleGround
			object.gravity = GRAVITY_GROUND
			ATan2(object.angle, object.ypos, object.xpos)
			object.angle += 128
			object.angle <<= 8
		end if
	end if

	if object.rotation < 0x100
		if object.rotation > 0
			object.rotation -= 8
		else
			object.rotation = 0
		end if
	else
		if object.rotation < 0x200
			object.rotation += 8
		else
			object.rotation = 0
		end if
	end if

	object.shadowPos.x = object.xpos
	object.shadowPos.x *= 144
	object.shadowPos.x >>= 8

	temp0 = object.xpos
	temp0 *= 45
	temp0 >>= 13
	Abs(temp0)
	GetTableValue(object.shadowPos.y, temp0, PlayerObject_shadowYPosTable)
	temp0 = object.shadowPos.y
	object.shadowPos.y *= 105

	object.shadowPos.u = 116

	// Shadow frame funky stuff
	if temp0 > -112
		if temp0 > -24
			if object.xpos < 0
				object.shadowPos.u = 224
			else
				object.shadowPos.u = 215
			end if
		else
			if object.xpos < 0
				object.shadowPos.u = 149
			else
				object.shadowPos.u = 182
			end if
		end if
	end if
end function


function PlayerObject_HurtSpin
	if options.vsMode == true
		if vs.playerID == 0
			if object.changedLeader == false
				PlayerObject_leadingPlayer = object.entityPos
				PlayerObject_leadingPlayer -= 2
				PlayerObject_leadingPlayer ^= vs.playerID
				PlayerObject_leadingPlayer ^= 1
				object.changedLeader = true
			end if
		end if
	end if
	
	if object.spinTimer < 512
		object.spinTimer += 16
		object.rotation += 16
	else
		object.speed = 0
		object.spinTimer = 0
		object.invincibilityTimer = 60
		if object.gravity == GRAVITY_GROUND
			object.state = PlayerObject_HandleGround
		else
			object.state = PlayerObject_HandleAir
		end if
	end if
end function


function PlayerObject_RingLoss
	if object[currentPlayer].rings > 0
		PlaySfx(SfxName[Lose Rings], false)
		object[currentPlayer].rings -= 10

		temp0 = 10
		if object[currentPlayer].rings < 0
			temp0 += object[currentPlayer].rings
			object[currentPlayer].rings = 0
		end if

		temp2 = temp0
		temp2 >>= 1
		temp2 <<= 5
		temp1 = 384
		temp1 -= temp2
		temp2 = object.angle
		temp2 >>= 7
		temp1 += temp2
		temp3 = object[currentPlayer].xpos
		temp3 *= 224
		temp4 = object[currentPlayer].ypos
		temp4 *= -220
		temp5 = object[2].ypos
		temp5 *= -48
		temp4 += 0x600000
		temp4 += temp5
		while temp0 > 0
			CreateTempObject(TypeName[Lose Ring], 0, temp3, temp4)
			Cos(object[tempObjectPos].xvel, temp1)
			Sin(object[tempObjectPos].yvel, temp1)
			object[tempObjectPos].xvel <<= 9
			object[tempObjectPos].yvel <<= 10
			object[tempObjectPos].scale = 0x140
			Rand(loseRing[tempObjectPos].gravityStrength, 0x2000)
			loseRing[tempObjectPos].gravityStrength += 0x7000
			Rand(object[tempObjectPos].animationSpeed, 128)
			object[tempObjectPos].animationSpeed += 64
			temp0--
			temp1 += 32
		loop
	end if
end function


// ========================
// Events
// ========================

event ObjectMain
	CallFunction(object.stateInput)
	CallFunction(object.state)

	if options.vsMode == true
		temp0 = object.entityPos
		temp0 -= 2
		temp0 ^= vs.playerID
		temp0 ^= PlayerObject_leadingPlayer
		if temp0 == 0
			if object.zpos < 0x1000
				object.zpos += 64
			end if
		else
			if object.zpos > 0x400
				object.zpos -= 64
			end if
		end if
	end if

	object.stagePos.z = object.zpos
	object.stagePos.z <<= 8
	object.stagePos.z += halfpipe[0].playerPos.z
	object.stagePos.z += 0xC0000

	object.animationTimer += object.animationSpeed
	if object.animationTimer >= 240
		object.animationTimer -= 240
		object.frame++
		object.frame &= 7
		object.frame += object.animation
		object.frame += object.frameOffset
	end if

	CallFunction(PlayerObject_ProcessDrawing)
	object.playerFrame++
	object.playerFrame %= 28
end event


event ObjectStartup
	LoadSpriteSheet("Special/Objects.gif")

	// Running - Sonic
	SpriteFrame(-16, -28, 32, 56, 1, 68)
	SpriteFrame(-16, -28, 32, 56, 34, 68)
	SpriteFrame(-16, -28, 32, 56, 67, 68)
	SpriteFrame(-16, -28, 32, 56, 100, 68)
	SpriteFrame(-16, -28, 32, 56, 1, 125)
	SpriteFrame(-16, -28, 32, 56, 34, 125)
	SpriteFrame(-16, -28, 32, 56, 67, 125)
	SpriteFrame(-16, -28, 32, 56, 100, 125)

	// Jumping - Sonic
	SpriteFrame(-16, -20, 32, 40, 133, 67)
	SpriteFrame(-16, -20, 32, 40, 166, 67)
	SpriteFrame(-16, -20, 32, 40, 133, 67)
	SpriteFrame(-16, -20, 32, 40, 166, 67)
	SpriteFrame(-16, -20, 32, 40, 133, 67)
	SpriteFrame(-16, -20, 32, 40, 166, 67)
	SpriteFrame(-16, -20, 32, 40, 133, 67)
	SpriteFrame(-16, -20, 32, 40, 166, 67)

	// Running - Tails
	SpriteFrame(-12, -24, 24, 48, 199, 67)
	SpriteFrame(-16, -24, 32, 48, 224, 67)
	SpriteFrame(-16, -24, 32, 48, 257, 67)
	SpriteFrame(-16, -24, 32, 48, 290, 67)
	SpriteFrame(-12, -24, 24, 48, 199, 116)
	SpriteFrame(-16, -24, 32, 48, 224, 116)
	SpriteFrame(-16, -24, 32, 48, 257, 116)
	SpriteFrame(-16, -24, 32, 48, 290, 116)

	// Jumping - Tails
	SpriteFrame(-16, -16, 32, 32, 133, 108)
	SpriteFrame(-16, -16, 32, 32, 166, 108)
	SpriteFrame(-16, -16, 32, 32, 133, 108)
	SpriteFrame(-16, -16, 32, 32, 166, 108)
	SpriteFrame(-16, -16, 32, 32, 133, 108)
	SpriteFrame(-16, -16, 32, 32, 166, 108)
	SpriteFrame(-16, -16, 32, 32, 133, 108)
	SpriteFrame(-16, -16, 32, 32, 166, 108)

	// Running - Knux
	SpriteFrame(-16, -28, 32, 56, 1, 182)
	SpriteFrame(-16, -28, 32, 56, 34, 182)
	SpriteFrame(-16, -28, 32, 56, 67, 182)
	SpriteFrame(-16, -28, 32, 56, 100, 182)
	SpriteFrame(-16, -28, 32, 56, 133, 182)
	SpriteFrame(-16, -28, 32, 56, 166, 182)
	SpriteFrame(-16, -28, 32, 56, 199, 182)
	SpriteFrame(-16, -28, 32, 56, 232, 182)

	// Jumping - Knux
	SpriteFrame(-16, -20, 32, 40, 133, 141)
	SpriteFrame(-16, -20, 32, 40, 166, 141)
	SpriteFrame(-16, -20, 32, 40, 133, 141)
	SpriteFrame(-16, -20, 32, 40, 166, 141)
	SpriteFrame(-16, -20, 32, 40, 133, 141)
	SpriteFrame(-16, -20, 32, 40, 166, 141)
	SpriteFrame(-16, -20, 32, 40, 133, 141)
	SpriteFrame(-16, -20, 32, 40, 166, 141)

	SpriteFrame(-6, -6, 16, 24, 323, 58)
	SpriteFrame(-8, 0, 24, 24, 340, 58)
	SpriteFrame(-8, 8, 24, 16, 365, 58)
	SpriteFrame(-9, -1, 16, 24, 390, 58)
	SpriteFrame(-11, -9, 16, 32, 407, 58)
	SpriteFrame(-16, -9, 24, 24, 424, 58)
	SpriteFrame(-16, -9, 24, 24, 323, 83)
	SpriteFrame(-8, -40, 16, 7, 348, 100)
	SpriteFrame(-8, -40, 16, 7, 348, 108)

	object[2].type = TypeName[Player Object]
	object[2].priority = PRIORITY_ACTIVE
	object[2].zpos = 0x1000
	object[2].state = PlayerObject_HandleGround
	object[2].stateInput = PlayerObject_ProcessP1Inputs
	switch stage.playerListPos
	case PlayerName[SONIC]
		object[2].xBoundsR = 88
		object[2].frameOffset = 0
		break

	case PlayerName[TAILS]
		object[2].xBoundsR = 90
		object[2].frameOffset = 16
		break
		
	case PlayerName[KNUCKLES]
		object[2].xBoundsR = 88
		object[2].frameOffset = 32
		break

	end switch

	object[2].xBoundsR <<= 8
	object[2].xBoundsL = object[2].xBoundsR
	FlipSign(object[2].xBoundsL)
	object[2].groundPos = object[2].xBoundsR
	object[2].groundPos *= object[2].xBoundsR
	object[2].groundPos -= 0x10000
	object[2].frame = object[2].frameOffset

	if options.vsMode == true
		object[3].type = TypeName[Player Object]
		object[3].priority = PRIORITY_ACTIVE
		object[3].playerTagFrame = vs.playerID
		object[3].playerTagFrame ^= 1
		object[3].playerTagFrame += 55
		if vs.playerID == 0
			object[2].zpos = 0x1000
			object[3].zpos = 0x400
		else
			object[2].zpos = 0x400
			object[3].zpos = 0x1000
		end if

		object[3].state = PlayerObject_HandleGround
		object[3].stateInput = PlayerObject_Process2PVSPlayer
		switch vs.player2Type
		case PlayerName[SONIC]
			object[3].xBoundsR = 88
			object[3].frameOffset = 0
			break

		case PlayerName[TAILS]
			object[3].xBoundsR = 90
			object[3].frameOffset = 16
			break

		case PlayerName[KNUCKLES]
			object[3].xBoundsR = 88
			object[3].frameOffset = 32
			break
		end switch

		object[3].xBoundsR <<= 8
		object[3].xBoundsL = object[3].xBoundsR
		FlipSign(object[3].xBoundsL)
		object[3].groundPos = object[3].xBoundsR
		object[3].groundPos *= object[3].xBoundsR
		object[3].groundPos -= 0x10000
		object[3].frame = object[3].frameOffset

		stage.player2Enabled = false
		playerCount = 2
		CallNativeFunction2(ReceiveEntity, 0x400, true)
		ResetObjectEntity(0x400, TypeName[Blank Object], 0, 0, 0)
	end if

	if stage.player2Enabled == true
		object[3].type = TypeName[Player Object]
		object[3].priority = PRIORITY_ACTIVE
		object[3].zpos = 0x400
		object[3].state = PlayerObject_HandleAir
		object[3].stateInput = PlayerObject_ProcessP2Inputs
		object[3].xBoundsR = 90
		object[3].frameOffset = 16
		object[3].xBoundsR <<= 8
		object[3].xBoundsL = object[3].xBoundsR
		FlipSign(object[3].xBoundsL)
		object[3].groundPos = object[3].xBoundsR
		object[3].groundPos *= object[3].xBoundsR
		object[3].groundPos -= 0x10000
		object[3].frame = object[3].frameOffset
	end if
end event


event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
